local imageobjects={}
local imagezoom=1
local tempstring=""
local editstring=nil
local allowsubmit=false
local hscroll,vscoll=0,0
local donotdelete=false
--editstring ="\raddtag" 

local function transfer(to,nosave)
	programdata.tagscroll=0
if nosave then goto force end
	if editstring then
		if editstring==to then return end

		if editstring=="\raddtag" then
			if tempstring ~="" and not tempstring:isin(tags[programdata.selectedimage]) then  
				table.insert(tags[programdata.selectedimage], tempstring)
				writetag(programdata.selectedimage , tags[programdata.selectedimage])
				print("added tag "..tempstring.." to image "..programdata.selectedimage)
			end
			if not programdata.shift then tempstring="" end --shift preserves input
			--if programdata.control then return end --control doesn't clear - do this by aborting the reset
		else
			
		end
	end

	::force::
	editstring=to
end







function init(self)
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)

	if imageobjects["image"] and not donotdelete then
		gui.delete_node(imageobjects["image"])
		imageobjects["image"]=nil
	
		if mimg and not donotdelete and not config.keepimagesloaded then gui.delete_texture("mimg") mimg=false   end
	end
	
	if programdata.sidebar then
		for i in pairs(imageobjects) do
			if i:sub(1,2)=="t\r"  then gui.set_alpha(imageobjects[i], 0) end
		end
		goto skip
	end

	for i in pairs(imageobjects) do
		if i:sub(1,2)=="t\r" then gui.set_alpha(imageobjects[i], 1) end
	end
	
	local pos=vmath.vector3(0,0,0)
	local text=""
	
	for i in pairs(imageobjects) do
		if i~="image" then
		gui.delete_node(imageobjects[i])
		imageobjects[i]=nil
		end
	end

	if mimg and not donotdelete then gui.delete_texture("mimg") mimg=false  end
	
	
	if  programdata.screen ~="image" then programdata.fullimagemode=false donotdelete=false programdata.imgys=0 programdata.imgxs=0 programdata.imgz=1 programdata.tagscroll=0 goto skip end
	if not programdata.selectedimage then goto skip end
	if not images[programdata.selectedimage].height or not images[programdata.selectedimage].width then --idk why that happens. it does? when you scroll a lot with arrows. ooh, because it doesn't load extra while not in gallery.
		print("WARNING: IMAGE "..programdata.selectedimage.."HAS NO WIDTH OR HEIGHT.")
		local f=io.open("images/"..programdata.selectedimage ,"rb") --reload the file data.
		local td = f:read("*a")
		local i =  image.load( td)  
		images[programdata.selectedimage] = {  width=i.width , height=i.height , data=td } 
		f:close()
	end 
	local imgscale = math.min( (programdata.width-config.guiscale*150-config.galleryimagepadding*programdata.width*2)/(images[programdata.selectedimage].width or 1) ,
			(programdata.height-config.galleryimagepadding*programdata.height*2-config.guiscale*10)/(images[programdata.selectedimage].height or 1)  )	
	--imageobjects["image"] = gui.new_box_node(vmath.vector3(config.guiscale*150+config.galleryimagepadding*programdata.width ,programdata.height-config.galleryimagepadding*programdata.height,0), vmath.vector3(programdata.width-config.guiscale*150-config.galleryimagepadding*programdata.width*2, 
	--images[programdata.selectedimage].height*(programdata.width-config.guiscale*150-config.galleryimagepadding*programdata.height*2 )/images[programdata.selectedimage].width ,0 ) )
	if not donotdelete then
	imageobjects["image"] = gui.new_box_node(vmath.vector3(config.guiscale*150+config.galleryimagepadding*programdata.width ,programdata.height-config.galleryimagepadding*programdata.height-config.guiscale*10,0), vmath.vector3(images[programdata.selectedimage].width*imgscale,images[programdata.selectedimage].height*imgscale,0) )
	end
	if imageobjects["image"] then 
		gui.set_size(imageobjects["image"],  vmath.vector3(images[programdata.selectedimage].width*imgscale,images[programdata.selectedimage].height*imgscale,0)) 
		gui.set_position(imageobjects["image"], vmath.vector3(config.guiscale*150+config.galleryimagepadding*programdata.width ,programdata.height-config.galleryimagepadding*programdata.height-config.guiscale*10,0))
	end
	
	imageobjects["ttext"] = gui.new_text_node(pos, text)
	imageobjects["atext"] = gui.new_text_node(pos, text)
	gui.set_pivot(imageobjects["image"], 8)
	gui.set_pivot(imageobjects["ttext"], 8)
	gui.set_pivot(imageobjects["atext"], 8)
	local yoffset=0 - config.guiscale*100
	local minval = yoffset
	local tabletoparse={}
	local mode=0
	if editstring =="\raddtag" then
		mode=1
		tabletoparse=programdata.tagcount

		tabletoparse=ordertagsuggestions(tempstring,tags[programdata.selectedimage]) -- so that the numbers are in an order instead of whatever memory is
--[[
		for i,v in pairs(programdata.tagcount) do --doing this has made me see just how unstable this code is. prone to breaking. a lot.
			local added
			for i2,v2 in pairs(tabletoparse) do
				
				if programdata.tagcount[v2]<v then
					
					table.insert(tabletoparse, i2 , i)
					added=true
					break
				end
				
			end
		
			if not added then table.insert(tabletoparse, i) end
		end]]
		
		
	elseif not programdata.fullimagemode then
		tabletoparse=tags[programdata.selectedimage]
	end

	
	for i,v in pairs(tabletoparse or {}) do
		if mode==1 then 

			--if not cif(config.fuzzysearch,v:fuzzysearch(tempstring),v:search(tempstring)) then goto next end
			
			local f
			for _,t in pairs(tags[programdata.selectedimage]) do
				if v==t then goto next end --prevent existing tags from showing up
			end
		end
		if yoffset<=0-programdata.height-programdata.tagscroll then goto next end --using break doesn't pair well with this sometimes for whatever reason.
		local i2=v
		if mode==1 then --[[i,v = v,i]] end
		
		imageobjects["b\r"..i2]=gui.new_box_node(vmath.vector3(0,programdata.height+yoffset+programdata.tagscroll,0), vmath.vector3(1,1,0) )
		gui.set_pivot(imageobjects["b\r"..i2], 8)
		if mode ==1 then a=programdata.tagcount[v].." " --[[i.." "]] else a="" end
		imageobjects["t\r"..i2]=gui.new_text_node(vmath.vector3(0,programdata.height+yoffset+programdata.tagscroll,0),  a ..v)
		gui.set_pivot(imageobjects["t\r"..i2], 8)
		gui.set_size(imageobjects["t\r"..i2], vmath.vector3( config.guiscale*150/config.guiscale ,0,0 ) )
		gui.set_line_break(imageobjects["t\r"..i2], true)
		gui.set_font(imageobjects["t\r"..i2], "system_font")

		local tc=gettagcolor(v)
		--if mode ==1 then tc=gettagcolor(v:sub(3)) end
		gui.set_color(imageobjects["t\r"..i2], vmath.vector3(tc.t[1],tc.t[2],tc.t[3] ) )
		gui.set_scale(imageobjects["t\r"..i2], vmath.vector3(config.guiscale,config.guiscale,0))
		gui.set_color(imageobjects["b\r"..i2], vmath.vector3(tc.b[1],tc.b[2],tc.b[3]) )
		
		local dy = gui.get_text_metrics_from_node(imageobjects["t\r"..i2]).height*config.guiscale
		gui.set_size(imageobjects["b\r"..i2],  vmath.vector3(config.guiscale*150 , dy , 0) )
		yoffset=yoffset-dy-config.guiscale*5

		if yoffset + programdata.tagscroll +dy > minval then --this is very lazy but works
			gui.delete_node(imageobjects["b\r"..i2])
			imageobjects["b\r"..i2]=nil
			gui.delete_node(imageobjects["t\r"..i2])
			imageobjects["t\r"..i2]=nil
			
		end
		::next::
	end

	if not programdata.fullimagemode then
		imageobjects["t\rimagefilenametxt"]=gui.new_text_node(vmath.vector3(config.guiscale*150+config.galleryimagepadding*programdata.width ,programdata.height-config.guiscale*5,0), programdata.selectedimage)
		gui.set_pivot(imageobjects["t\rimagefilenametxt"], 8)
		gui.set_scale(imageobjects["t\rimagefilenametxt"], vmath.vector3(config.guiscale,config.guiscale,0))
		
	imageobjects["entryboxstatic"] = gui.new_box_node(vmath.vector3(0,programdata.height,0), vmath.vector3( config.guiscale*150 ,config.guiscale*20,0))
	gui.set_pivot(imageobjects["entryboxstatic"], 8)
	gui.set_color(imageobjects["entryboxstatic"], vmath.vector3(.2,.2,.2))

	imageobjects["t\rentrystatic"] = gui.new_text_node(vmath.vector3( 75*config.guiscale,programdata.height,0), "add:")

	if editstring =="\raddtag" then
		local match
		for _,v in pairs(tags[programdata.selectedimage] or {}) do if tempstring==v then match=true break end end
		if match then
			gui.set_color(imageobjects["t\rentrystatic"], vmath.vector3(1,0,0))
			allowsubmit=false
		else
			gui.set_color(imageobjects["t\rentrystatic"], vmath.vector3(0,1,0))
			allowsubmit=true
		end
	end
	
	gui.set_scale(imageobjects["t\rentrystatic"], vmath.vector3(config.guiscale,config.guiscale,0))
	gui.set_pivot(imageobjects["t\rentrystatic"] , 1)

	local tc=gettagcolor(tempstring)
	imageobjects["entrybox"] = gui.new_box_node(vmath.vector3(0,programdata.height-config.guiscale*20,0), vmath.vector3( config.guiscale*150 ,config.guiscale*75,0))
	
	gui.set_pivot(imageobjects["entrybox"], 8)
	gui.set_color(imageobjects["entrybox"], vmath.vector3(tc.b[1] , tc.b[2] , tc.b[3] ))

	if editstring=="\raddtag"  then
	imageobjects["t\rentry"]=gui.new_text_node( vmath.vector3(0,programdata.height-config.guiscale*20,0), tempstring)
	gui.set_pivot(imageobjects["t\rentry"], 8)
	gui.set_line_break(imageobjects["t\rentry"], true)
	gui.set_size(imageobjects["t\rentry"], vmath.vector3(   150  , config.guiscale*75,0))
	gui.set_color(imageobjects["t\rentry"], vmath.vector3(tc.t[1] , tc.t[2] , tc.t[3] ))
	gui.move_above(imageobjects["t\rentry"], nil)--imageobjects["entrybox"])
	end

	end
	

	::imageonly::

	if not donotdelete then
		local tex =fullimagedata[programdata.selectedimage] or image.load(images[programdata.selectedimage].data  )
		if config.keepimagesloaded then fullimagedata[programdata.selectedimage]=tex end
		gui.new_texture("mimg", tex.width, tex.height, tex.type, tex.buffer)
		mimg=true
		gui.set_texture_data("mimg", tex.width, tex.height, tex.type, tex.buffer) 
		gui.set_texture(imageobjects["image"], "mimg" ) 
		donotdelete=true --this saves frames, probably
	end
	
	
	if programdata.fullimagemode then
		--imageobjects["image"]
		gui.set_size(imageobjects["image"], vmath.vector3( images[programdata.selectedimage].width*programdata.imgz , images[programdata.selectedimage].height*programdata.imgz , 0  ))
		gui.set_pivot(imageobjects["image"], gui.PIVOT_CENTER)
		local xmargins=images[programdata.selectedimage].width-programdata.width 
		local ymargins=images[programdata.selectedimage].height-programdata.height 
	--	gui.set_position(imageobjects["image"], vmath.vector3(programdata.imgxs-xmargins/2 ,programdata.height-programdata.imgys+ymargins/2,0) )
	gui.set_position(imageobjects["image"], vmath.vector3(programdata.width/2-programdata.imgxs*programdata.imgz,programdata.height/2 -programdata.imgys*programdata.imgz,0))
	
		--print(programdata.imgxs-images[programdata.selectedimage].width)
		local harea=programdata.width-config.guiscale*15
		imageobjects["hscrollback"]=gui.new_box_node(vmath.vector3(0,0,0), vmath.vector3(harea,config.guiscale*15,0))
		gui.set_pivot(imageobjects["hscrollback"], gui.PIVOT_SW)
		gui.set_color(imageobjects["hscrollback"], vmath.vector3(.25,.25,.25))
		local hp=0
		
		hp=programdata.width/2-programdata.imgxs*programdata.imgz+images[programdata.selectedimage].width*programdata.imgz/2 --pos of right side
		hp=hp/(programdata.width+images[programdata.selectedimage].width*programdata.imgz)
		hp=-((hp*2)-1)
	--	print(hp)
		
		imageobjects["hscroll"]=gui.new_box_node(vmath.vector3( harea*(hp+1)/2,0,0), vmath.vector3(config.guiscale*15*4,config.guiscale*15,0) )
		gui.set_pivot(imageobjects["hscroll"], gui.PIVOT_S)
		gui.set_color(imageobjects["hscroll"], vmath.vector3(.75,.75,.75))

		local varea=programdata.height-config.guiscale*15
		imageobjects["vscrollback"]=gui.new_box_node(vmath.vector3(programdata.width,programdata.height,0), vmath.vector3(config.guiscale*15,varea,0))
		gui.set_pivot(imageobjects["vscrollback"], gui.PIVOT_NE)
		gui.set_color(imageobjects["vscrollback"], vmath.vector3(.25,.25,.25))

		local vp=0
		vp=programdata.height/2-programdata.imgys*programdata.imgz+images[programdata.selectedimage].height*programdata.imgz/2 --pos of right side
		vp=vp/(programdata.height+images[programdata.selectedimage].height*programdata.imgz)
		vp=-((vp*2)-1)
		--print(vp)
		
		imageobjects["vscroll"]=gui.new_box_node(vmath.vector3(programdata.width, varea*(vp+1)/2 ,0)  , vmath.vector3(config.guiscale*15,config.guiscale*15*4,0))
		gui.set_pivot(imageobjects["vscroll"], gui.PIVOT_E)
		gui.set_color(imageobjects["vscroll"], vmath.vector3(.75,.75,.75))
	


		
	end
	--print(dt)
	
	programdata.debounce=true
	::skip::


	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if programdata.screen~="image" or (not programdata.debounce ) then return end --debounce is to prevent double clicks
	
	
	if action_id==hash"esc" and action.pressed then
		if editstring then
			transfer(nil, true)
			editstring=nil
			tempstring=""
		elseif programdata.fullimagemode then
				programdata.fullimagemode=false
		else
			transfer(nil, true) programdata.screen="gallery" programdata.tagscroll=0
		end
	end


	
	if action_id==hash"c" and action.pressed and programdata.control and not editstring then
		if  not programdata.shift then
			clipboard=table.copy(tags[programdata.selectedimage])
		else
			for i,v in pairs(tags[programdata.selectedimage]) do
				if not isin(v,clipboard) then table.insert(clipboard, v) end
			end
		end
		print(table.tostring(clipboard))
	end

	if action_id==hash"v" and action.pressed and programdata.control and not editstring then
		if  not programdata.shift then
			for i,v in pairs(clipboard) do
				if not isin(v,tags[programdata.selectedimage]) then table.insert(tags[programdata.selectedimage], v) end
			end
			
		else
			tags[programdata.selectedimage]=table.copy(clipboard)
		end
		writetag(programdata.selectedimage,tags[programdata.selectedimage])
	end

	
	
	if not programdata.sidebar  then
		if action_id == hash"mwu" and action.pressed then
			if action.x <= config.guiscale*150 and programdata.tagscroll >0 and not programdata.fullimagemode then
				programdata.tagscroll=programdata.tagscroll-delta*config.scrollsen*2*config.guiscale*programdata.height
				--print(delta)
			elseif programdata.fullimagemode then
				if programdata.shift then
					programdata.imgxs=programdata.imgxs-1*config.scrollsen*images[programdata.selectedimage].width*delta
				elseif programdata.control then
					local last=programdata.imgz
					programdata.imgz=programdata.imgz*(1.05) --don't even try to add sensitivity changes. it's just a mess.
					--programdata.imgxs=programdata.imgxs *programdata.imgz/last --keep the same position
					--programdata.imgys=programdata.imgys *programdata.imgz/last --this funky equation took a bit to figure out...
					
				else
					programdata.imgys=programdata.imgys+1*config.scrollsen*images[programdata.selectedimage].height*delta
				end
			end
			
		elseif action_id==hash"mwd" and action.pressed then
			if action.x <= config.guiscale*150 and not programdata.fullimagemode then
				programdata.tagscroll=programdata.tagscroll+delta*2*config.scrollsen*config.guiscale*programdata.height
			elseif programdata.fullimagemode then
				if programdata.shift then
					programdata.imgxs=programdata.imgxs+1*config.scrollsen*images[programdata.selectedimage].width*delta
				elseif programdata.control then
					local last=programdata.imgz
					programdata.imgz=programdata.imgz/(1.05)
				--	programdata.imgxs=programdata.imgxs *programdata.imgz/last
				--	programdata.imgys=programdata.imgys *programdata.imgz/last 
				else
					programdata.imgys=programdata.imgys-1*config.scrollsen*images[programdata.selectedimage].height*delta
				end
			end

		elseif action_id==hash"m1"  then
			
			if imageobjects["entrybox"] and gui.pick_node(imageobjects["entrybox"], action.x, action.y) and action.pressed then --action.x <= config.guiscale*150 and action.y >= programdata.height-config.guiscale*80 then   
				if not editstring then
					transfer("\raddtag")
				else
					tempstring=""
					transfer(nil)
				end
			elseif  editstring=="\raddtag"  and action.pressed then
				local match
				for i in pairs(imageobjects) do
						--if gui.pick_node(imageobjects[i], action.x, action.y) then print(i , gui.pick_node(imageobjects[i], action.x, action.y)) end
					if i:sub(1,2)~="b\r" then goto next end
					if gui.pick_node(imageobjects[i], action.x, action.y) then
						match=i   break end
					::next::
				end
				if match then
					--print(match)
					local saved=tempstring
					tempstring=match:sub(3)

					transfer(nil)
					transfer("\raddtag")
					if programdata.control then tempstring=saved end
				else
					tempstring=""
					transfer(nil)
				end
			elseif action.x >= config.guiscale*150 and not programdata.fullimagemode and action.pressed then --swap when clicked
--				local ims , ips = gui.get_size(imageobjects["image"]) , gui.get_position(imageobjects["image"])
				if gui.pick_node(imageobjects["image"], action.x, action.y) then 
						transfer(nil)
						programdata.fullimagemode=true
					end
				elseif programdata.fullimagemode then
					if gui.pick_node(imageobjects["hscrollback"], action.x, action.y) then
						local x=action.screen_x
						--print(action.x,action.screen_x)
						x=x*programdata.width/(programdata.width-15*config.guiscale)
						x=x/programdata.width --now is 0 to 1
						x=x*-1+1
						--when 0: it has to be all the way to the right
						x=(1-x)*(programdata.width/(2*programdata.imgz)+images[programdata.selectedimage].width/2)    -(x)*(images[programdata.selectedimage].width/2+programdata.width/(2*programdata.imgz))
						--i cannot fathom why the application width is bieng divided by the zoom level. but it makes it work.
						x=x
						programdata.imgxs=x
					elseif gui.pick_node(imageobjects["vscrollback"], action.x, action.y) then
						local y=action.screen_y
						--print(action.x,action.screen_x)
						y=y*programdata.height/(programdata.height-15*config.guiscale)
						y=y/programdata.height --now is 0 to 1
						y=y*-1+1
						y=(1-y)*(programdata.height/(2*programdata.imgz)+images[programdata.selectedimage].height/2)    -(y)*(images[programdata.selectedimage].height/2+programdata.height/(2*programdata.imgz))
	
						y=y
						programdata.imgys=y

					elseif action.pressed then
						programdata.fullimagemode=false
					end
			elseif action.pressed then
				transfer(nil)
			end
			
		elseif action_id==hash"m2" and action.pressed then
			local match
			for i in pairs(imageobjects) do
				--if editstring~=nil then break end
				if i:sub(1,2)~="b\r" then goto next end

				local pos , siz = gui.get_position(imageobjects[i]) , gui.get_size(imageobjects[i])
				if  gui.pick_node(imageobjects[i], action.x, action.y) then 
					match=i   break end
					::next::
				end

				if match then
					if not editstring then
						print("deleted tag "..(match:sub(3) or "") .." from image ".. programdata.selectedimage  )
						table.remove( tags[programdata.selectedimage] , has(tags[programdata.selectedimage], match:sub(3)) )
						writetag(programdata.selectedimage , tags[programdata.selectedimage])
					elseif editstring=="\raddtag" then
						tempstring=match:sub(3)
					end
						
				end

			
		elseif action_id==hash"enter" and action.pressed then 
			local saved=tempstring
			transfer(nil)
			transfer("\raddtag")
			if programdata.control then tempstring=saved end
		end
	end

	if programdata.screen=="image" and not programdata.sidebar then
		if action_id==hash"text" and editstring then tempstring=tempstring..action.text:lower() end
		if action_id==hash"delete" and editstring and (action.pressed or action.repeated) then tempstring=tempstring:sub(1,#tempstring-1) end
	end

	if not programdata.sidebar and not programdata.fullimagemode then --this shit doesn't work. why?
		if action_id==hash"left" and (action.pressed or action.repeated) then 
			local num
			for i,v in pairs(imageorder) do
				if v==programdata.selectedimage then
					num=i
					break
				end
			end
			donotdelete=false
			programdata.selectedimage= imageorder[num-1] or programdata.selectedimage
			programdata.imgxs=0 -- reset scrolling and the like when swapping
			programdata.imgys=0 
			programdata.imgz=1
			programdata.tagscroll=0
		end
		
		if action_id==hash"right" and (action.pressed or action.repeated)  then
			local num
			for i,v in pairs(imageorder) do
				if v==programdata.selectedimage then
					num=i
					break
				end
			end
			programdata.selectedimage= imageorder[num+1] or programdata.selectedimage
			programdata.imgxs=0 -- reset scrolling and the like when swapping
			programdata.imgys=0 
			programdata.imgz=1
			programdata.tagscroll=0
			donotdelete=false
		end
	end

	
end
