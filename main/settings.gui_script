local elems={}
local textdata={}
function init(self)
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	for i in pairs(elems) do
		if i:sub(1,1)=="\t" then
		gui.delete_node(elems[i].gui) --using like this to make binding events muuuuch easier.
		elems[i]=nil
		end
	end
	if programdata.sidebar then goto skip end

	for i in pairs(elems) do
		gui.delete_node(elems[i].gui) --using like this to make binding events muuuuch easier.
		elems[i]=nil
	end
	
	if programdata.screen~="settings" then programdata.settingscroll=0 programdata.settingshorscroll=0 textdata={} goto skip end

	local guiscale = config.guiscale
	yoff=1 + programdata.settingscroll/(40*guiscale) --y offset, this time im gonna use it as a unit and not pixelcount.
	if not (yoff<=0) then 
	elems["imgrowbg"]={}
	elems["imgrowbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
	gui.set_pivot(elems["imgrowbg"].gui , 8)
	gui.set_color(elems["imgrowbg"].gui , vmath.vector3(.1,.1,.1))
	elems["\timgrow"]={}
	elems["\timgrow"].gui = gui.new_text_node(vmath.vector3( 160*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Gallery Images Per Row: "..config.imagesperrow )
	gui.set_pivot(elems["\timgrow"].gui , 8)
	gui.set_font(elems["\timgrow"].gui, "sysdouble")
	gui.set_scale(elems["\timgrow"].gui, vmath.vector3(guiscale,guiscale,0))
	
	elems["imgrowadd"]={}	
	elems["imgrowadd"].binding="imagesperrow"
	elems["imgrowadd"].operation="add"
	elems["imgrowadd"].amount=1
	elems["imgrowadd"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["imgrowadd"].gui , 8)
	gui.set_texture(elems["imgrowadd"].gui, "srcimg")
	gui.play_flipbook(elems["imgrowadd"].gui, "add")
	
	elems["imgrowsub"]={}	
	elems["imgrowsub"].binding="imagesperrow"
	elems["imgrowsub"].operation="sub"
	elems["imgrowsub"].amount=1
	elems["imgrowsub"].gui = gui.new_box_node(vmath.vector3( 100*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["imgrowsub"].gui , 8)
	gui.set_texture(elems["imgrowsub"].gui, "srcimg")
	gui.play_flipbook(elems["imgrowsub"].gui, "sub")
	end

	yoff=yoff+1

	if not (yoff<=0) then 
	elems["\timgrowinfo"]={}
	elems["\timgrowinfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Self explanitory. Values over 5 have heavy performance impact." )
	gui.set_pivot(elems["\timgrowinfo"].gui , 8)
	gui.set_scale(elems["\timgrowinfo"].gui, vmath.vector3(guiscale,guiscale,0))
	end

	yoff=yoff+1
	
	if not (yoff<=0) then 
	elems["guiscalebg"]={}
	elems["guiscalebg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
	gui.set_pivot(elems["guiscalebg"].gui , 8)
	gui.set_color(elems["guiscalebg"].gui , vmath.vector3(.1,.1,.1))
	
	elems["\tguiscale"]={}
	elems["\tguiscale"].gui = gui.new_text_node(vmath.vector3( 160*guiscale, programdata.height-(yoff*40*guiscale),0  ), "GUI Scale: "..config.guiscale )
	gui.set_pivot(elems["\tguiscale"].gui , 8)
	gui.set_font(elems["\tguiscale"].gui, "sysdouble")
	gui.set_scale(elems["\tguiscale"].gui, vmath.vector3(guiscale,guiscale,0))

	elems["guiscaleadd"]={}	
	elems["guiscaleadd"].binding="guiscale"
	elems["guiscaleadd"].operation="add"
	elems["guiscaleadd"].amount=.05
	elems["guiscaleadd"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["guiscaleadd"].gui , 8)
	gui.set_texture(elems["guiscaleadd"].gui, "srcimg")
	gui.play_flipbook(elems["guiscaleadd"].gui, "add")

	elems["guiscalesub"]={}	
	elems["guiscalesub"].binding="guiscale"
	elems["guiscalesub"].operation="sub"
	elems["guiscalesub"].amount=.05
	elems["guiscalesub"].gui = gui.new_box_node(vmath.vector3( 100*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["guiscalesub"].gui , 8)
	gui.set_texture(elems["guiscalesub"].gui, "srcimg")
	gui.play_flipbook(elems["guiscalesub"].gui, "sub")
	end

	if not (yoff<=0) then 
	yoff=yoff+1
	elems["\tguiscaleinfo"]={}
	elems["\tguiscaleinfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "The size of GUI elements, such as text and buttons, but not images." )
	gui.set_pivot(elems["\tguiscaleinfo"].gui , 8)
	gui.set_scale(elems["\tguiscaleinfo"].gui, vmath.vector3(guiscale,guiscale,0))
	end


	yoff=yoff+1

	if not (yoff<=0) then 
	elems["scrollspeedbg"]={}
	elems["scrollspeedbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
	gui.set_pivot(elems["scrollspeedbg"].gui , 8)
	gui.set_color(elems["scrollspeedbg"].gui , vmath.vector3(.1,.1,.1))

	elems["\tscrollspeed"]={}
	elems["\tscrollspeed"].gui = gui.new_text_node(vmath.vector3( 160*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Scroll Speed: "..config.scrollsen )
	gui.set_pivot(elems["\tscrollspeed"].gui , 8)
	gui.set_font(elems["\tscrollspeed"].gui, "sysdouble")
	gui.set_scale(elems["\tscrollspeed"].gui, vmath.vector3(guiscale,guiscale,0))

	elems["scrollspeedadd"]={}	
	elems["scrollspeedadd"].binding="scrollsen"
	elems["scrollspeedadd"].operation="add"
	elems["scrollspeedadd"].amount=.05
	elems["scrollspeedadd"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["scrollspeedadd"].gui , 8)
	gui.set_texture(elems["scrollspeedadd"].gui, "srcimg")
	gui.play_flipbook(elems["scrollspeedadd"].gui, "add")

	elems["scrollspeedsub"]={}	
	elems["scrollspeedsub"].binding="scrollsen"
	elems["scrollspeedsub"].operation="sub"
	elems["scrollspeedsub"].amount=.05
	elems["scrollspeedsub"].gui = gui.new_box_node(vmath.vector3( 100*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["scrollspeedsub"].gui , 8)
	gui.set_texture(elems["scrollspeedsub"].gui, "srcimg")
	gui.play_flipbook(elems["scrollspeedsub"].gui, "sub")
	end

	yoff=yoff+1
	if not (yoff<=0) then 
	elems["\tscollspeedinfo"]={}
	elems["\tscollspeedinfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "A multiplier to the scrolling. affects all screens." )
	gui.set_pivot(elems["\tscollspeedinfo"].gui , 8)
	gui.set_scale(elems["\tscollspeedinfo"].gui, vmath.vector3(guiscale,guiscale,0))
	end



	yoff=yoff+1
	if not (yoff<=0) then 
	elems["loadnumbg"]={}
	elems["loadnumbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
	gui.set_pivot(elems["loadnumbg"].gui , 8)
	gui.set_color(elems["loadnumbg"].gui , vmath.vector3(.1,.1,.1))

	elems["\tloadnum"]={}
	elems["\tloadnum"].gui = gui.new_text_node(vmath.vector3( 160*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Image Loading Count: "..config.loadnum )
	gui.set_pivot(elems["\tloadnum"].gui , 8)
	gui.set_font(elems["\tloadnum"].gui, "sysdouble")
	gui.set_scale(elems["\tloadnum"].gui, vmath.vector3(guiscale,guiscale,0))

	elems["loadnumadd"]={}	
	elems["loadnumadd"].binding="loadnum"
	elems["loadnumadd"].operation="add"
	elems["loadnumadd"].amount=1
	elems["loadnumadd"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["loadnumadd"].gui , 8)
	gui.set_texture(elems["loadnumadd"].gui, "srcimg")
	gui.play_flipbook(elems["loadnumadd"].gui, "add")

	elems["loadnumsub"]={}	
	elems["loadnumsub"].binding="loadnum"
	elems["loadnumsub"].operation="sub"
	elems["loadnumsub"].amount=1
	elems["loadnumsub"].gui = gui.new_box_node(vmath.vector3( 100*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
	gui.set_pivot(elems["loadnumsub"].gui , 8)
	gui.set_texture(elems["loadnumsub"].gui, "srcimg")
	gui.play_flipbook(elems["loadnumsub"].gui, "sub")
	end
	yoff=yoff+1
	if not (yoff<=0) then 
	elems["\tloadnuminfo"]={}
	elems["\tloadnuminfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "How many images are loaded at a time. affects performance at startup." )
	gui.set_pivot(elems["\tloadnuminfo"].gui , 8)
	gui.set_scale(elems["\tloadnuminfo"].gui, vmath.vector3(guiscale,guiscale,0))
	end


	
	if not (yoff<=0) then 
		yoff=yoff+1
	--config.keepimagesloaded
	elems["keeploadbg"]={}
	elems["keeploadbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
	gui.set_pivot(elems["keeploadbg"].gui , 8)
	gui.set_color(elems["keeploadbg"].gui , vmath.vector3(.1,.1,.1))

	elems["\tkeepload"]={}
	elems["\tkeepload"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Keep Images Loaded: "..tostring(config.keepimagesloaded) )
	gui.set_pivot(elems["\tkeepload"].gui , 8)
	gui.set_font(elems["\tkeepload"].gui, "sysdouble")
	gui.set_scale(elems["\tkeepload"].gui, vmath.vector3(guiscale,guiscale,0))

	elems["keeploadset"]={}	
	elems["keeploadset"].binding="keepimagesloaded"
	elems["keeploadset"].operation="togglebool"
	elems["keeploadset"].gui = gui.new_box_node(vmath.vector3( 360*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*120 , guiscale*40 , 0    ))
	gui.set_alpha(elems["keeploadset"].gui, 0)
	gui.set_pivot(elems["keeploadset"].gui , 8)

	yoff=yoff+1
	elems["\tkeeploadinfo"]={}
	elems["\tkeeploadinfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Always keep images loaded. reduces stuttering. huge memory requirement" )
	gui.set_pivot(elems["\tkeeploadinfo"].gui , 8)
	gui.set_scale(elems["\tkeeploadinfo"].gui, vmath.vector3(guiscale,guiscale,0))
	
	end

	
	if not (yoff<=0) then 
		yoff=yoff+1
		--config.keepimagesloaded
		elems["copyshowingbg"]={}
		elems["copyshowingbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
		elems["copyshowingbg"].binding="copyshowing"
		elems["copyshowingbg"].operation="copyshowing"
		gui.set_pivot(elems["copyshowingbg"].gui , 8)
		gui.set_color(elems["copyshowingbg"].gui , vmath.vector3(.1,.1,.1))

		elems["\tcopyshowing"]={}
		elems["\tcopyshowing"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "[Copy Gallery Images]") 
		gui.set_pivot(elems["\tcopyshowing"].gui , 8)
		gui.set_font(elems["\tcopyshowing"].gui, "sysdouble")
		gui.set_scale(elems["\tcopyshowing"].gui, vmath.vector3(guiscale,guiscale,0))

		
		yoff=yoff+1
		elems["\tcopyshowinginfo"]={}
		elems["\tcopyshowinginfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Copy showing images in the gallery to the 'copied' folder" )
		gui.set_pivot(elems["\tcopyshowinginfo"].gui , 8)
		gui.set_scale(elems["\tkeeploadinfo"].gui, vmath.vector3(guiscale,guiscale,0))
		
	end


	
	
	
	
	yoff=yoff+1
	--and now for hell: tag colors
	--deftag
	if not (yoff<=0) then 
	local dtc = gettagcolor()
	elems["deftagbg"]={}
	elems["deftagbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*40 , 0    ))
	gui.set_pivot(elems["deftagbg"].gui , 8)
	gui.set_color(elems["deftagbg"].gui , vmath.vector3(dtc.b[1],dtc.b[2],dtc.b[3]))

	elems["\tdeftag"]={}
	elems["\tdeftag"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Default Tag Color:")
	gui.set_pivot(elems["\tdeftag"].gui , 8)
	gui.set_font(elems["\tdeftag"].gui, "sysdouble")
	gui.set_scale(elems["\tdeftag"].gui, vmath.vector3(guiscale,guiscale,0))
	gui.set_color(elems["\tdeftag"].gui , vmath.vector3(dtc.t[1],dtc.t[2], dtc.t[3]))
	end

	for _,v in pairs({"t","b"}) do
	yoff=yoff+1
	if not (yoff<=0) then 
	elems["deftag"..v.."bg"]={}
	elems["deftag"..v.."bg"].gui = gui.new_box_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*180 , guiscale*40 , 0    ))
	gui.set_pivot(elems["deftag"..v.."bg"].gui , 8)
	gui.set_color(elems["deftag"..v.."bg"].gui , vmath.vector3(.1,.1,.1))
	elems["\tdeftag"..v]={}
	if v=="t" then
		elems["\tdeftag"..v].gui = gui.new_text_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Text:")
	else
		elems["\tdeftag"..v].gui = gui.new_text_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Background:")
	end
	gui.set_pivot(elems["\tdeftag"..v].gui , 8)
	gui.set_font(elems["\tdeftag"..v].gui, "sysdouble")
	gui.set_scale(elems["\tdeftag"..v].gui, vmath.vector3(guiscale,guiscale,0))
	--gui.set_color(elems["\tdeftag"..v].gui , vmath.vector3(dtc.t[1],dtc.t[2], dtc.t[3]))
	

	local xo=10*guiscale
	for i in pairs(config.defaulttagcolors.t) do -- 1 = r , 2 = g, 3 = b
		if programdata.height-(yoff*40*guiscale) <0 then break end
		elems["deftag"..v..i.."bg"]={}
		elems["deftag"..v..i.."bg"].gui=gui.new_box_node(vmath.vector3( xo+260*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*160 , guiscale*40 , 0    ))
		gui.set_pivot(elems["deftag"..v..i.."bg"].gui , 8)
		gui.set_color(elems["deftag"..v..i.."bg"].gui , vmath.vector3(.1,.1,.1))

		elems["default"..v.."tagcolors"..i.."add"]={}	
		elems["default"..v.."tagcolors"..i.."add"].binding="defaulttagcolors"
		elems["default"..v.."tagcolors"..i.."add"].binding2=v
		elems["default"..v.."tagcolors"..i.."add"].binding3=i
		elems["default"..v.."tagcolors"..i.."add"].operation="add"
		elems["default"..v.."tagcolors"..i.."add"].amount=.05
		elems["default"..v.."tagcolors"..i.."add"].gui = gui.new_box_node(vmath.vector3( xo+260*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
		gui.set_pivot(elems["default"..v.."tagcolors"..i.."add"].gui , 8)
		gui.set_texture(elems["default"..v.."tagcolors"..i.."add"].gui, "srcimg")
		gui.play_flipbook(elems["default"..v.."tagcolors"..i.."add"].gui, "add")

		elems["default"..v.."tagcolors"..i.."sub"]={}	
		elems["default"..v.."tagcolors"..i.."sub"].binding="defaulttagcolors"
		elems["default"..v.."tagcolors"..i.."sub"].binding2=v
		elems["default"..v.."tagcolors"..i.."sub"].binding3=i
		elems["default"..v.."tagcolors"..i.."sub"].operation="sub"
		elems["default"..v.."tagcolors"..i.."sub"].amount=.05
		elems["default"..v.."tagcolors"..i.."sub"].gui = gui.new_box_node(vmath.vector3( xo+380*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
		gui.set_pivot(elems["default"..v.."tagcolors"..i.."sub"].gui , 8)
		gui.set_texture(elems["default"..v.."tagcolors"..i.."sub"].gui, "srcimg")
		gui.play_flipbook(elems["default"..v.."tagcolors"..i.."sub"].gui, "sub")
		
		elems["\tdeftag"..v..i.."bg"]={}
		elems["\tdeftag"..v..i.."bg"].gui = gui.new_text_node(vmath.vector3( xo+300*guiscale, programdata.height-(yoff*40*guiscale),0  ), math.floor( config.defaulttagcolors[v][i] *100 +.49)/100 )
		gui.set_pivot(elems["\tdeftag"..v..i.."bg"].gui , 8)
		gui.set_font(elems["\tdeftag"..v..i.."bg"].gui, "sysdouble")
		gui.set_scale(elems["\tdeftag"..v..i.."bg"].gui, vmath.vector3(guiscale,guiscale,0))
		--gui.set_color(elems["\tdeftag"..v..i.."bg"].gui , vmath.vector3(dtc[v][1],dtc[v][2], dtc[v][3]))
		xo=xo+40*guiscale*4+10*guiscale
	end
	end

	
	end
	yoff=yoff+1.5

	if not (yoff<=0) then 
	elems["ctagbg"]={}
	elems["ctagbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*400 , guiscale*40 , 0    ))
	gui.set_pivot(elems["ctagbg"].gui , 8)
	gui.set_color(elems["ctagbg"].gui , vmath.vector3(.1,.1,.1))

	elems["\tctag"]={}
	elems["\tctag"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Custom Tag Colors:")
	gui.set_pivot(elems["\tctag"].gui , 8)
	gui.set_font(elems["\tctag"].gui, "sysdouble")
	gui.set_scale(elems["\tctag"].gui, vmath.vector3(guiscale,guiscale,0))
	end
	
	--this handals the dynamic user created colors.
	for tind,tdat in pairs(config.tagcolors) do --basically recycle the code above... this time it's hell 2: electric boogaloo
		yoff=yoff+1
	if not (yoff<=0) then 
		if programdata.height-(yoff*40*guiscale) <0 then  break end
		local dtc = gettagcolor(tdat.string)
		elems["deftagbg"..tind]={}
		elems["deftagbg"..tind].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*40 , 0    ))
		gui.set_pivot(elems["deftagbg"..tind].gui , 8)
		gui.set_color(elems["deftagbg"..tind].gui , vmath.vector3(dtc.b[1],dtc.b[2],dtc.b[3]))

		elems["\tdeftag"..tind]={}
		elems["\tdeftag"..tind].gui = gui.new_text_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), tdat.string)
		gui.set_pivot(elems["\tdeftag"..tind].gui , 8)
		gui.set_size(elems["\tdeftag"..tind].gui, vmath.vector3( guiscale*520 , guiscale*40 , 0    ))
		gui.set_font(elems["\tdeftag"..tind].gui, "sysdouble")
		gui.set_scale(elems["\tdeftag"..tind].gui, vmath.vector3(guiscale,guiscale,0))
		gui.set_color(elems["\tdeftag"..tind].gui , vmath.vector3(dtc.t[1],dtc.t[2], dtc.t[3]))
		elems["\tdeftag"..tind].binding="tagcolors"
		elems["\tdeftag"..tind].binding2=tind
		elems["\tdeftag"..tind].binding3="string"
		elems["\tdeftag"..tind].operation="textset"

		elems["tagcolorsdelete"..tind]={}	
		elems["tagcolorsdelete"..tind].binding="tagcolors"
		elems["tagcolorsdelete"..tind].binding2=tind
		elems["tagcolorsdelete"..tind].operation="delete"
		elems["tagcolorsdelete"..tind].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
		gui.set_pivot(elems["tagcolorsdelete"..tind].gui , 8)
		gui.set_texture(elems["tagcolorsdelete"..tind].gui, "srcimg")
		gui.play_flipbook(elems["tagcolorsdelete"..tind].gui, "rem")
	end
		for _,v in pairs({"t","b"}) do
			yoff=yoff+1
			if programdata.height-(yoff*40*guiscale) <0 then break end
			elems["deftag"..v.."bg"..tind]={}
			elems["deftag"..v.."bg"..tind].gui = gui.new_box_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*180 , guiscale*40 , 0    ))
			gui.set_pivot(elems["deftag"..v.."bg"..tind].gui , 8)
			gui.set_color(elems["deftag"..v.."bg"..tind].gui , vmath.vector3(.1,.1,.1))
			elems["\tdeftag"..v..tind]={}
			if v=="t" then
				elems["\tdeftag"..v..tind].gui = gui.new_text_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Text:")
			else
				elems["\tdeftag"..v..tind].gui = gui.new_text_node(vmath.vector3( 80*guiscale, programdata.height-(yoff*40*guiscale),0  ), "Background:")
			end
			gui.set_pivot(elems["\tdeftag"..v..tind].gui , 8)
			gui.set_font(elems["\tdeftag"..v..tind].gui, "sysdouble")
			gui.set_scale(elems["\tdeftag"..v..tind].gui, vmath.vector3(guiscale,guiscale,0))
			--gui.set_color(elems["\tdeftag"..v].gui , vmath.vector3(dtc.t[1],dtc.t[2], dtc.t[3]))
			local xo=10*guiscale
			for i in pairs(config.defaulttagcolors.t) do -- 1 = r , 2 = g, 3 = b
				if not (yoff<=0) then 
				elems["deftag"..v..i.."bg"..tind]={}
				elems["deftag"..v..i.."bg"..tind].gui=gui.new_box_node(vmath.vector3( xo+260*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*160 , guiscale*40 , 0    ))
				gui.set_pivot(elems["deftag"..v..i.."bg"..tind].gui , 8)
				gui.set_color(elems["deftag"..v..i.."bg"..tind].gui , vmath.vector3(.1,.1,.1))

				elems["default"..v.."tagcolors"..i.."add"..tind]={}	
				elems["default"..v.."tagcolors"..i.."add"..tind].binding="tagcolors"
				elems["default"..v.."tagcolors"..i.."add"..tind].binding2=tind
				elems["default"..v.."tagcolors"..i.."add"..tind].binding3=v
				elems["default"..v.."tagcolors"..i.."add"..tind].binding4=i
				elems["default"..v.."tagcolors"..i.."add"..tind].operation="add"
				elems["default"..v.."tagcolors"..i.."add"..tind].amount=.05
				elems["default"..v.."tagcolors"..i.."add"..tind].gui = gui.new_box_node(vmath.vector3( xo+260*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
				gui.set_pivot(elems["default"..v.."tagcolors"..i.."add"..tind].gui , 8)
				gui.set_texture(elems["default"..v.."tagcolors"..i.."add"..tind].gui, "srcimg")
				gui.play_flipbook(elems["default"..v.."tagcolors"..i.."add"..tind].gui, "add")

				elems["default"..v.."tagcolors"..i.."sub"..tind]={}	
				elems["default"..v.."tagcolors"..i.."sub"..tind].binding="tagcolors"
				elems["default"..v.."tagcolors"..i.."sub"..tind].binding2=tind
				elems["default"..v.."tagcolors"..i.."sub"..tind].binding3=v
				elems["default"..v.."tagcolors"..i.."sub"..tind].binding4=i
				elems["default"..v.."tagcolors"..i.."sub"..tind].operation="sub"
				elems["default"..v.."tagcolors"..i.."sub"..tind].amount=.05
				elems["default"..v.."tagcolors"..i.."sub"..tind].gui = gui.new_box_node(vmath.vector3( xo+380*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))
				gui.set_pivot(elems["default"..v.."tagcolors"..i.."sub"..tind].gui , 8)
				gui.set_texture(elems["default"..v.."tagcolors"..i.."sub"..tind].gui, "srcimg")
				gui.play_flipbook(elems["default"..v.."tagcolors"..i.."sub"..tind].gui, "sub")

				elems["\tdeftag"..v..i.."bg"..tind]={}
				elems["\tdeftag"..v..i.."bg"..tind].gui = gui.new_text_node(vmath.vector3( xo+300*guiscale, programdata.height-(yoff*40*guiscale),0  ), math.floor( 100* config.tagcolors[tind][v][i] +.49)/100 )
				gui.set_pivot(elems["\tdeftag"..v..i.."bg"..tind].gui , 8)
				gui.set_font(elems["\tdeftag"..v..i.."bg"..tind].gui, "sysdouble")
				gui.set_scale(elems["\tdeftag"..v..i.."bg"..tind].gui, vmath.vector3(guiscale,guiscale,0))
				--gui.set_color(elems["\tdeftag"..v..i.."bg"].gui , vmath.vector3(dtc[v][1],dtc[v][2], dtc[v][3]))
				xo=xo+40*guiscale*4+10*guiscale
				end
			end
		end
	end
	
	yoff=yoff+1
	if not (yoff<=0) then 
	elems["addctagbg"]={gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))  } 
	elems["addctagbg"].binding="tagcolors"
	elems["addctagbg"].operation="createtable"
	elems["addctagbg"].amount= { b={0,0,0} , t={1,1,1} , string=""   }
	gui.set_pivot(elems["addctagbg"].gui , 8)
	gui.set_color(elems["addctagbg"].gui, vmath.vector3(.1,.1,.1))
	
	elems["addctagbut"]={gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*40 , guiscale*40 , 0    ))}
	gui.set_pivot(elems["addctagbut"].gui , 8)
	gui.set_texture(elems["addctagbut"].gui, "srcimg")
	gui.play_flipbook(elems["addctagbut"].gui, "add")
	end

	
	
	::skip::
end

function on_input(self, action_id, action)
	if programdata.screen~="settings" then return end

	if action_id==hash"m1" and action.pressed then
		for i,v in pairs(elems) do
			if v.binding then --only do this if it has a binding.
				local pos,siz = gui.get_position(v.gui) , gui.get_size(v.gui)
				if not(action.x>=pos.x and action.x<=pos.x+siz.x and action.y <= pos.y and action.y >= pos.y-siz.y) then goto next end

				if not v.binding2 then
					if v.operation=="add" then
						config[v.binding]=config[v.binding]+v.amount
					elseif v.operation=="sub" then
						config[v.binding]=config[v.binding]-v.amount
					elseif v.operation=="createtable" then
						table.insert(config[v.binding], v.amount)
					elseif v.operation=="togglebool" then
						config[v.binding] = not config[v.binding]
					elseif v.operation=="copyshowing" then
						for i,v in pairs(showing) do
							if v then
								local s = io.open("images/"..i,"rb")
								local t = io.open("copied/"..i,"w")

								if s and t then
									t:write(s:read("*all"))
									t:close()
									s:close()
								end
								
							end
							
						end
						
					end
				elseif not v.binding3 then
					if v.operation=="add" then
						config[v.binding][v.binding2]=config[v.binding][v.binding2]+v.amount
					elseif v.operation=="sub" then
						config[v.binding][v.binding2]=config[v.binding][v.binding2]-v.amount
					elseif v.operation=="delete" then
						table.remove(config[v.binding], v.binding2 )
					end
				elseif not v.binding4 then
					if v.operation=="add" then
						config[v.binding][v.binding2][v.binding3]=config[v.binding][v.binding2][v.binding3]+v.amount
					elseif v.operation=="sub" then
						config[v.binding][v.binding2][v.binding3]=config[v.binding][v.binding2][v.binding3]-v.amount
					elseif v.operation=="textset" then
						textdata={active=true , binding=v.binding , binding2=v.binding2,binding3=v.binding3}
					end
				else
					if v.operation=="add" then --yes, this is bad code. but it sure beats using loadsting(), i tihnk?
						config[v.binding][v.binding2][v.binding3][v.binding4]=config[v.binding][v.binding2][v.binding3][v.binding4]+v.amount
					elseif v.operation=="sub" then
						config[v.binding][v.binding2][v.binding3][v.binding4]=config[v.binding][v.binding2][v.binding3][v.binding4]-v.amount
					end
				end
				writeconfigfile() --save after any changes.
				print("saved config file")
				break
			end
			::next::
		end
	end


	if action_id==hash"mwd" then
			programdata.settingscroll=programdata.settingscroll-1*delta*programdata.height*config.scrollsen
	end
	
	if action_id==hash"mwu" then
		if programdata.settingscroll <0 then
			programdata.settingscroll=programdata.settingscroll+1*delta*programdata.height*config.scrollsen
		end
	end

	if action_id==hash"text" then
		if textdata.active then
			local td=textdata
			config[td.binding][td.binding2][td.binding3]=config[td.binding][td.binding2][td.binding3]..action.text:lower()
			writeconfigfile()
			print("saved config file")
		end
	end
	
	if action_id==hash"delete" and (action.pressed or action.repeated) then
		if textdata.active then
			local td=textdata
			config[td.binding][td.binding2][td.binding3]=config[td.binding][td.binding2][td.binding3]:sub(1,#config[td.binding][td.binding2][td.binding3] -1)
			writeconfigfile()
			print("saved config file")
			end
	end
	
	
end