local elems={}
local guinodes={}
local textdata={}
function init(self)
	msg.post(".", "acquire_input_focus")


	local vb=generategradientbuffer(vmath.vector3(0,1,1),vmath.vector3(1,1,1),100)
	gui.new_texture("rgb_r", 100, 1, image.TYPE_RGB, vb, false)

	vb=generategradientbuffer(vmath.vector3(1,0,1),vmath.vector3(1,1,1),100)
	gui.new_texture("rgb_g", 100, 1, image.TYPE_RGB, vb, false)

	vb=generategradientbuffer(vmath.vector3(1,1,0),vmath.vector3(1,1,1),100)
	gui.new_texture("rgb_b", 100, 1, image.TYPE_RGB, vb, false)
end

typebinding=nil


function generategradientbuffer(from,to,resolution) -- from -> to . x-axis only. sorry fellas. RGB
	resolution=resolution or 100
	local r1,g1,b1 = from.x,from.y,from.z
	local r2,g2,b2 = to.x,to.y,to.z
	bt={}
	resolution=resolution-1
	for i=0,resolution do
		bt[#bt+1]=string.char(     math.floor(255*(r1*(1-i/resolution) + r2*(i/resolution)))  )
		bt[#bt+1]=string.char(     math.floor(255*(g1*(1-i/resolution) + g2*(i/resolution)))  )
		bt[#bt+1]=string.char(     math.floor(255*(b1*(1-i/resolution) + b2*(i/resolution)))  )
	end
	return table.concat(bt)
end


function addconfigsection_incrementdecrement(ypos,label,description,table,index,incamt,min,max)
	min=min or (-1/0)
	max=max or (1/0)
	incamt=incamt or 1
	if not (table or index) then return end
	
	local node
	local uiscale=config.guiscale

	if ypos<0 or ypos>programdata.height+uiscale*50 then goto exit end
	
	node=gui.new_box_node(vmath.vector3(uiscale*20,ypos,0), vmath.vector3(programdata.width-40*uiscale,50*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.4))
	guinodes[#guinodes+1]={node=node}


	node = gui.new_box_node(vmath.vector3( 20*uiscale, ypos,0  ), vmath.vector3( uiscale*30   ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "add")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			table[index]=table[index]+incamt
			table[index]=math.min(table[index],max)
			writeconfigfile()
		end
	end}

	node = gui.new_text_node(vmath.vector3( 80*uiscale, ypos,0  ),  table[index] )
	gui.set_pivot(node , gui.PIVOT_N)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}
	
	node = gui.new_box_node(vmath.vector3( 110*uiscale, ypos,0  ), vmath.vector3( uiscale*30   ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "sub")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			table[index]=table[index]-incamt
			table[index]=math.max(table[index],min)
			writeconfigfile()
		end
	end}

	node = gui.new_text_node(vmath.vector3( 145*uiscale, ypos,0  ),  label or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-30*uiscale,0  ),  description or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysstd")
	guinodes[#guinodes+1]={node=node}

	::exit::
	return ypos-60*uiscale
end


function addconfigsection_booleantoggle(ypos,label,description,table,index)
	if not (table or index) then return end

	local node
	local uiscale=config.guiscale

	if ypos<0 or ypos>programdata.height+uiscale*50 then goto exit end
	
	node=gui.new_box_node(vmath.vector3(uiscale*20,ypos,0), vmath.vector3(programdata.width-40*uiscale,50*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.4))
	guinodes[#guinodes+1]={node=node}

	node = gui.new_box_node(vmath.vector3( 20*uiscale, ypos,0  ), vmath.vector3( uiscale*30   ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, table[index] and "armyes" or "armno")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			table[index]=not table[index]
			writeconfigfile()
		end
	end}

	node = gui.new_text_node(vmath.vector3( 55*uiscale, ypos,0  ),  label or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-30*uiscale,0  ),  description or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysstd")
	guinodes[#guinodes+1]={node=node}

	::exit::
	return ypos-60*uiscale
end

function addconfigsection_multdiv(ypos,label,description,table,index,incamt,min,max)
	min=min or (-1/0)
	max=max or (1/0)
	incamt=incamt or 1
	if not (table or index) then return end

	local node
	local uiscale=config.guiscale

	if ypos<0 or ypos>programdata.height+uiscale*50 then goto exit end
	
	node=gui.new_box_node(vmath.vector3(uiscale*20,ypos,0), vmath.vector3(programdata.width-40*uiscale,50*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.4))
	guinodes[#guinodes+1]={node=node}


	node = gui.new_box_node(vmath.vector3( 20*uiscale, ypos,0  ), vmath.vector3( uiscale*30   ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "add")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			table[index]=table[index]*incamt
			table[index]=math.min(table[index],max)
			writeconfigfile()
		end
	end}

	node = gui.new_text_node(vmath.vector3( 80*uiscale, ypos,0  ),  table[index] )
	gui.set_pivot(node , gui.PIVOT_N)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	node = gui.new_box_node(vmath.vector3( 110*uiscale, ypos,0  ), vmath.vector3( uiscale*30   ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "sub")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			table[index]=table[index]/incamt
			table[index]=math.max(table[index],min)
			writeconfigfile()
		end
	end}

	node = gui.new_text_node(vmath.vector3( 145*uiscale, ypos,0  ),  label or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-30*uiscale,0  ),  description or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysstd")
	guinodes[#guinodes+1]={node=node}

	::exit::
	return ypos-60*uiscale
end



function addconfigsection_slider(ypos,label,description,table,index,min,max)
	min=min or (0)
	max=max or (1)
	if not (table or index) then return end

	local node
	local uiscale=config.guiscale

	if ypos<0 or ypos>programdata.height+uiscale*50 then goto exit end

	node=gui.new_box_node(vmath.vector3(uiscale*20,ypos,0), vmath.vector3(programdata.width-40*uiscale,80*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.4))
	guinodes[#guinodes+1]={node=node}

	node = gui.new_box_node(vmath.vector3( 30*uiscale, ypos-35*uiscale,0  ), vmath.vector3( uiscale*300 ,uiscale*20,0  ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.2))
	guinodes[#guinodes+1]={node=node}

	node = gui.new_box_node(vmath.vector3( 35*uiscale, ypos-40*uiscale,0  ), vmath.vector3( uiscale*290 ,uiscale*10,0  ))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.5))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.value==1 and gui.pick_node(nd.node, action.x, action.y) then

			local p= (action.x-35*uiscale)/(uiscale*290)
			
			table[index]= p*(max-min) + min 

			writeconfigfile()
		end
	end}

	node = gui.new_pie_node(vmath.vector3( 35*uiscale + (uiscale*290)*( (table[index]-min)/(max-min)  )  , ypos-35*uiscale,0  ),  vmath.vector3(uiscale*20)  )
	gui.set_pivot(node , gui.PIVOT_N)
	gui.set_color(node, vmath.vector3(.75))
	guinodes[#guinodes+1]={node=node}

	node = gui.new_text_node(vmath.vector3( 80*uiscale, ypos,0  ),  string.format("%.2f",table[index])  )
	gui.set_pivot(node , gui.PIVOT_N)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}



	node = gui.new_text_node(vmath.vector3( 145*uiscale, ypos,0  ),  label or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-60*uiscale,0  ),  description or "" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysstd")
	guinodes[#guinodes+1]={node=node}

	::exit::
	return ypos-90*uiscale
end





function addconfigsection_rigbyslider(ypos,table,index,xpos,min,max,texture,colormask)
	if not (table or index) then return end

	local node
	local uiscale=config.guiscale
	local p=0.0
	if ypos<0 or ypos>programdata.height+uiscale*30 then goto exit end


	p=(table[index]-min)/(max-min)
	
	node=gui.new_box_node(vmath.vector3(xpos,ypos,0), vmath.vector3(200*uiscale,20*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.4))
	guinodes[#guinodes+1]={node=node}

	node=gui.new_box_node(vmath.vector3(xpos+5*uiscale,ypos-5*uiscale,0), vmath.vector3(190*uiscale,10*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	if texture then gui.set_texture(node, texture) end
	if not texture then gui.set_color(node,vmath.vector3(.25)) else gui.set_color(node,colormask or vmath.vector3(1,1,1))  end
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.value==1 and gui.pick_node(nd.node, action.x, action.y) then
			local p=(action.x-xpos-5*uiscale)/(190*uiscale)
			table[index]=p
		end
	end}

	
	
	node=gui.new_pie_node(vmath.vector3(xpos + 195*uiscale*p  -10*uiscale ,ypos,0), vmath.vector3(20*uiscale,20*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(.75))
	guinodes[#guinodes+1]={node=node}
	
	::exit::
	return ypos
end

function addconfigsection_customtagcolor(ypos,tagindex)
	if not tagindex then return ypos end

	local node
	local uiscale=config.guiscale
	local ctagd=config.tagcolors[tagindex]
	if not ctagd then return ypos end
	if ypos<0 or ypos>programdata.height+uiscale*30 then goto exit end
	
	node=gui.new_box_node(vmath.vector3(uiscale*20,ypos,0), vmath.vector3(programdata.width-40*uiscale,100*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.33))
	guinodes[#guinodes+1]={node=node}

	ypos=ypos-10




	node=gui.new_box_node(vmath.vector3(uiscale*30,ypos,0), vmath.vector3(30*uiscale,30*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "rem")
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			config.tagcolors[tagindex]=nil
			table.remove(config.tagcolors,tagindex)
			writeconfigfile()
		end 
	end}

	node=gui.new_box_node(vmath.vector3(uiscale*60,ypos,0), vmath.vector3(30*uiscale,30*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "collapse")
	gui.set_color(node,vmath.vector3(  tagindex==1 and .5 or 1.0  ))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if tagindex==1 then return end
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			config.tagcolors[tagindex],config.tagcolors[tagindex-1]=config.tagcolors[tagindex-1],config.tagcolors[tagindex]
			writeconfigfile()
		end 
	end}

	node=gui.new_box_node(vmath.vector3(uiscale*90,ypos,0), vmath.vector3(30*uiscale,30*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "expand")
	gui.set_color(node,vmath.vector3(  tagindex==#config.tagcolors and .5 or 1.0  ))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if tagindex==#config.tagcolors then return end
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			config.tagcolors[tagindex],config.tagcolors[tagindex+1]=config.tagcolors[tagindex+1],config.tagcolors[tagindex]
			writeconfigfile()
		end 
	end}

	
	node=gui.new_box_node(vmath.vector3(uiscale*125,ypos,0), vmath.vector3(175*uiscale,30*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.2))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			local currentmode=config.tagcolors[tagindex].mode
			if currentmode=="begins with" then
				config.tagcolors[tagindex].mode="contains"
			elseif currentmode=="contains" then
				config.tagcolors[tagindex].mode="ends in"
			elseif currentmode=="ends in" then
				config.tagcolors[tagindex].mode="lua pattern"	
			else
				config.tagcolors[tagindex].mode="begins with"
			end
			writeconfigfile()

			
		end 
	end}
	node = gui.new_text_node(vmath.vector3( 125*uiscale, ypos,0  ),  ctagd.mode )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}

	
	
	node=gui.new_box_node(vmath.vector3(uiscale*325,ypos,0), vmath.vector3(200*uiscale,30*uiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(ctagd.b[1],ctagd.b[2],ctagd.b[3]))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
		typebinding=function(txt) 
			if #txt==0 then
				ctagd.string=ctagd.string:sub(1,#ctagd.string-1)
			else
				ctagd.string=ctagd.string..txt
			end
			writeconfigfile()
		end
		end
	end}

	node = gui.new_text_node(vmath.vector3( 325*uiscale, ypos,0  ),  ctagd.string )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(ctagd.t[1],ctagd.t[2],ctagd.t[3]))
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}


	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-35*uiscale,0  ),  "backing" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}
	addconfigsection_rigbyslider(ypos-35*uiscale,ctagd.b,1,120*uiscale,0,1,"rgb_r", vmath.vector3(1,ctagd.b[2],ctagd.b[3])   )
	addconfigsection_rigbyslider(ypos-35*uiscale,ctagd.b,2,340*uiscale,0,1,"rgb_g", vmath.vector3(ctagd.b[1],1,ctagd.b[3]) )
	addconfigsection_rigbyslider(ypos-35*uiscale,ctagd.b,3,560*uiscale,0,1,"rgb_b", vmath.vector3(ctagd.b[1],ctagd.b[2],1)  )

	node = gui.new_text_node(vmath.vector3( 20*uiscale, ypos-60*uiscale,0  ),  "text" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}
	addconfigsection_rigbyslider(ypos-60*uiscale,ctagd.t,1,120*uiscale,0,1,"rgb_r", vmath.vector3(1,ctagd.t[2],ctagd.t[3]) )
	addconfigsection_rigbyslider(ypos-60*uiscale,ctagd.t,2,340*uiscale,0,1,"rgb_g", vmath.vector3(ctagd.t[1],1,ctagd.t[3]) )
	addconfigsection_rigbyslider(ypos-60*uiscale,ctagd.t,3,560*uiscale,0,1,"rgb_b", vmath.vector3(ctagd.t[1],ctagd.t[2],1) )


	::exit::
	return ypos-100
end



function update(self, dt)
	for i in pairs(elems) do
		if i:sub(1,1)=="\t" then
		gui.delete_node(elems[i].gui) --using like this to make binding events muuuuch easier.
		elems[i]=nil
		end
	end
	if programdata.sidebar then goto skip end

	local yposition=programdata.height-programdata.settingscroll*config.guiscale
	
	for i in pairs(elems) do
		gui.delete_node(elems[i].gui) --using like this to make binding events muuuuch easier.
		elems[i]=nil
	end

	for i=1,#guinodes do
		gui.delete_node(guinodes[i].node)
		guinodes[i]=nil
	end
	
	if programdata.screen~="settings" then programdata.settingscroll=0 programdata.settingshorscroll=0 textdata={} goto skip end

	local guiscale = config.guiscale

	yoff=0 + programdata.settingscroll/(40*guiscale) --y offset, this time im gonna use it as a unit and not pixelcount.
	if profiler then
	elems["\tdebug"]={}
	elems["\tdebug"].gui = gui.new_text_node(vmath.vector3( 10*guiscale, programdata.height-(yoff*40*guiscale),0  ), "RAM: ".. math.floor(100*RAM/1000000000)/100 .."GB".."\tCPU:" ..  math.floor(CPU*1000)/1000 .."%" )
	gui.set_pivot(elems["\tdebug"].gui , 8)--"RAM: ".. math.floor(100*profiler.get_memory_usage()/1000000000)/100 .."GB".."\tCPU:" .. math.floor(profiler.get_cpu_usage()*1000)/1000 .."%" )
	gui.set_scale(elems["\tdebug"].gui, vmath.vector3(guiscale,guiscale,0))
	yoff=yoff+.5
	end

	if true then --doing this for lexical scope reasons. local variables and whatnot.
		local c,p,s=0,0,0
		for i,v in pairs(imagedata) do
			c=c+1
			if v.width then
				p=p+1
			end
			if showing[i] then s=s+1 end
		end
		local t=0
		for i,v in pairs(programdata.tagcount) do
			t=t+1
		end
		
		elems["\tdebug2"]={}
		elems["\tdebug2"].gui = gui.new_text_node(vmath.vector3( 10*guiscale, programdata.height-(yoff*40*guiscale),0  ), "count:"..c.."\tshowing:"..s.."\tparsed:"..p.."\ttags:"..t )
		gui.set_pivot(elems["\tdebug2"].gui , 8)--"RAM: ".. math.floor(100*profiler.get_memory_usage()/1000000000)/100 .."GB".."\tCPU:" .. math.floor(profiler.get_cpu_usage()*1000)/1000 .."%" )
		gui.set_scale(elems["\tdebug2"].gui, vmath.vector3(guiscale,guiscale,0))
	end
	
	
	yoff=yoff+1

	yposition=yposition-guiscale*50
	
	yposition=addconfigsection_incrementdecrement(yposition,"images per row","the number of images displayed per row in the gallery",config,"imagesperrow",1,1,1/0)

	yposition=addconfigsection_incrementdecrement(yposition,"padding","the amount of padding between images, as a percent of the viewport size",config,"galleryimagepadding",.01,0,1)

	yposition=addconfigsection_incrementdecrement(yposition,"gui scale","the size of UI elements",config,"guiscale",.1,0,1/0)

	yposition=addconfigsection_incrementdecrement(yposition,"scroll sensitivity","how fast pages scroll",config,"scrollsen",.1,0,1/0)

	yposition=addconfigsection_booleantoggle(yposition,"fuzzy search","tag searching will result in more results, but with less prescision",config,"fuzzysearch")
	
	yposition=addconfigsection_multdiv(yposition,"thumbnail size","higher values will be more clear, but use more resources and take longer to load",config,"thumbnailsize",2,32,1024)


	yposition=addconfigsection_slider(yposition,"smart search strength","0=off. attempts to group tags which appear together when adding tags to an image.",config,"smartsearchstrength",0,1)
	
	local node


	node=gui.new_box_node(vmath.vector3(guiscale*20,yposition,0), vmath.vector3(750*guiscale,100*guiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.33))
	guinodes[#guinodes+1]={node=node}

	yposition=yposition-10
	node=gui.new_box_node(vmath.vector3(guiscale*30,yposition,0), vmath.vector3(250*guiscale,30*guiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(config.defaulttagcolors.b[1],config.defaulttagcolors.b[2],config.defaulttagcolors.b[3]))
	guinodes[#guinodes+1]={node=node}
	
	node = gui.new_text_node(vmath.vector3( 30*guiscale, yposition,0  ),  "default tag color" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(config.defaulttagcolors.t[1],config.defaulttagcolors.t[2],config.defaulttagcolors.t[3]))
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}


	node = gui.new_text_node(vmath.vector3( 20*guiscale, yposition-35*guiscale,0  ),  "backing" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}
	addconfigsection_rigbyslider(yposition-35*guiscale,config.defaulttagcolors.b,1,120*guiscale,0,1,"rgb_r", vmath.vector3(1,config.defaulttagcolors.b[2],config.defaulttagcolors.b[3]))
	addconfigsection_rigbyslider(yposition-35*guiscale,config.defaulttagcolors.b,2,340*guiscale,0,1,"rgb_g", vmath.vector3(config.defaulttagcolors.b[1],1,config.defaulttagcolors.b[3]))
	addconfigsection_rigbyslider(yposition-35*guiscale,config.defaulttagcolors.b,3,560*guiscale,0,1,"rgb_b", vmath.vector3(config.defaulttagcolors.b[1],config.defaulttagcolors.b[2],1))
	
	node = gui.new_text_node(vmath.vector3( 20*guiscale, yposition-60*guiscale,0  ),  "text" )
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node, "sysoneandhalf")
	guinodes[#guinodes+1]={node=node}
	addconfigsection_rigbyslider(yposition-60*guiscale,config.defaulttagcolors.t,1,120*guiscale,0,1,"rgb_r", vmath.vector3(1,config.defaulttagcolors.t[2],config.defaulttagcolors.t[3]))
	addconfigsection_rigbyslider(yposition-60*guiscale,config.defaulttagcolors.t,2,340*guiscale,0,1,"rgb_g", vmath.vector3(config.defaulttagcolors.t[1],1,config.defaulttagcolors.t[3]))
	addconfigsection_rigbyslider(yposition-60*guiscale,config.defaulttagcolors.t,3,560*guiscale,0,1,"rgb_b", vmath.vector3(config.defaulttagcolors.t[1],config.defaulttagcolors.t[2],1))

	yposition=yposition-100



	node=gui.new_text_node(vmath.vector3(guiscale*100,yposition,0), "custom tag colors")
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_font(node,"sysoneandhalf")
	guinodes[#guinodes+1]={node=node,}

	yposition=yposition-30

	for i=1,#config.tagcolors do
		yposition=addconfigsection_customtagcolor(yposition,i)
	end




	
	node=gui.new_box_node(vmath.vector3(guiscale*30,yposition,0), vmath.vector3(30*guiscale,30*guiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_color(node,vmath.vector3(  .2 ))
	guinodes[#guinodes+1]={node=node,}
	node=gui.new_box_node(vmath.vector3(guiscale*30,yposition,0), vmath.vector3(30*guiscale,30*guiscale,0))
	gui.set_pivot(node , gui.PIVOT_NW)
	gui.set_texture(node, "srcimg")
	gui.play_flipbook(node, "add")
	gui.set_color(node,vmath.vector3(  1.0  ))
	guinodes[#guinodes+1]={node=node,input=function(nd,action_id,action)
		if action_id==hash"m1" and action.pressed and gui.pick_node(nd.node, action.x, action.y) then
			config.tagcolors[#config.tagcolors+1]={string="",mode="begins with",t={1,1,1},b={0,0,0}}
			writeconfigfile()
		end 
	end}

	
	do return end





yoff=yoff+1
	if not (yoff<=0) then 
		
		--config.keepimagesloaded
		elems["copyshowingbg"]={}
		elems["copyshowingbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*60 , 0    ))
		elems["copyshowingbg"].binding="copyshowing"
		elems["copyshowingbg"].operation="copyshowing"
		gui.set_pivot(elems["copyshowingbg"].gui , 8)
		gui.set_color(elems["copyshowingbg"].gui , vmath.vector3(.1,.1,.1))

		elems["\tcopyshowing"]={}
		elems["\tcopyshowing"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "[Copy Gallery Images]") 
		gui.set_pivot(elems["\tcopyshowing"].gui , 8)
		gui.set_font(elems["\tcopyshowing"].gui, "sysdouble")
		gui.set_scale(elems["\tcopyshowing"].gui, vmath.vector3(guiscale,guiscale,0))

		
		
		elems["\tcopyshowinginfo"]={}
		elems["\tcopyshowinginfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-((yoff+1)*40*guiscale),0  ), "Copy showing images in the gallery to the 'copied' folder" )
		gui.set_pivot(elems["\tcopyshowinginfo"].gui , 8)
		gui.set_scale(elems["\tcopyshowinginfo"].gui, vmath.vector3(guiscale,guiscale,0))
		
	end
	yoff=yoff+1



	yoff=yoff+1
	if not (yoff<=0) then 

		elems["renameselectedbg"]={}
		elems["renameselectedbg"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*90 , 0    ))
		gui.set_pivot(elems["renameselectedbg"].gui , 8)
		gui.set_color(elems["renameselectedbg"].gui , vmath.vector3(.1,.1,.1))



		elems["renameselectedbgCDETECT"]={}
		elems["renameselectedbgCDETECT"].gui = gui.new_box_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), vmath.vector3( guiscale*560 , guiscale*34 , 0    ))
		elems["renameselectedbgCDETECT"].binding="renameselectedinputfocus"
		elems["renameselectedbgCDETECT"].operation="renameselectedinputfocus"
		gui.set_pivot(elems["renameselectedbgCDETECT"].gui , 8)
		gui.set_color(elems["renameselectedbgCDETECT"].gui , vmath.vector4(1,1,1,0))


		

		elems["\trenamenewname"]={}
		elems["\trenamenewname"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-(yoff*40*guiscale),0  ), "enter new name...") 
		gui.set_pivot(elems["\trenamenewname"].gui , 8)
		gui.set_font(elems["\trenamenewname"].gui, "sysoneandhalf")
		gui.set_scale(elems["\trenamenewname"].gui, vmath.vector3(guiscale,guiscale,0))
		gui.set_color(elems["\trenamenewname"].gui, vmath.vector3(.5,.5,.5))
		
		if textdata.active and textdata.binding2=="\nrename"  then
			textdata.binding3=textdata.binding3 or ""
			gui.set_color(elems["\trenamenewname"].gui,vmath.vector3(.75,.75,.75))
			gui.set_text(elems["\trenamenewname"].gui, textdata.binding3 )
		end	
		
		
		elems["\trenameselected"]={}
		elems["\trenameselected"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-((yoff+.75)*40*guiscale),0  ), "[Rename Selected]") 
		gui.set_size(elems["\trenameselected"].gui, vmath.vector3(guiscale*560,guiscale*40,0))
		gui.set_pivot(elems["\trenameselected"].gui , 8)
		gui.set_font(elems["\trenameselected"].gui, "sysdouble")
		gui.set_scale(elems["\trenameselected"].gui, vmath.vector3(guiscale,guiscale,0))
		elems["\trenameselected"].binding="renameselectedimage"
		elems["\trenameselected"].operation="renameselectedimage"



		elems["\trenameselcetedinfo"]={}
		elems["\trenameselcetedinfo"].gui = gui.new_text_node(vmath.vector3( 40*guiscale, programdata.height-((yoff+1.75)*40*guiscale),0  ), "Rename the currently selected image. extention automatically kept." )
		gui.set_pivot(elems["\trenameselcetedinfo"].gui , 8)
		gui.set_scale(elems["\trenameselcetedinfo"].gui, vmath.vector3(guiscale,guiscale,0))

	end
	yoff=yoff+1.75
	


	
	
	::skip::
end

function on_input(self, action_id, action)
	if programdata.screen~="settings" then return end


	if action_id==hash"m1" and action.pressed then
		typebinding=nil
	end
	if action_id==hash"text" and typebinding then
		typebinding(action.text)
	end
	if action_id==hash"delete" and action.repeated and typebinding then
		typebinding("")
	end
	
	for i=1,#guinodes do
		if guinodes[i].input then
			guinodes[i].input(guinodes[i],action_id,action)
		end
	end

	
	if action_id==hash"m1" and action.pressed then
		for i,v in pairs(elems) do
			if v.binding then --only do this if it has a binding.
				local pos,siz = gui.get_position(v.gui) , gui.get_size(v.gui) 
				if not gui.pick_node(v.gui, action.x, action.y) then goto next end

				if not v.binding2 then
					print(v.operation)
					if v.operation=="add" then
						config[v.binding]=config[v.binding]+v.amount
					elseif v.operation=="sub" then
						config[v.binding]=config[v.binding]-v.amount
					elseif v.operation=="createtable" then
						table.insert(config[v.binding], v.amount)
					elseif v.operation=="togglebool" then
						config[v.binding] = not config[v.binding]
					elseif v.operation=="copyshowing" then
						for i,v in pairs(showing) do
							if v then
								--[[
								local s = io.open("images/"..i,"rb")
								local t = io.open("copied/"..i,"w")
								if s and t then
									t:write(s:read("*all"))
									t:close()
									s:close()
								end]]
								copyfile("images/"..i , "copied/"..i)
								
							end
						end
					elseif v.operation=="copyselected" then
						if programdata.selectedimage then
							i=programdata.selectedimage --lazy copy paste FTW!
							--[[
							local s = io.open("images/"..i,"rb")
							local t = io.open("copied/"..i,"w")
							if s and t then
								t:write(s:read("*all"))
								t:close()
								s:close()
							end]]
							
							copyfile("images/"..i , "copied/"..i)
						end
					elseif v.operation=="renameselectedinputfocus" then
						
						textdata={active=true , binding=nil, binding2="\nrename",binding3=""}
					elseif v.operation=="renameselectedimage" then
				
						if not textdata.binding and textdata.active and programdata.selectedimage then --make  sure this is selected as text.
							newstr=textdata.binding3
							for _,let in pairs({"/","\\",":","*","?","\"","<",">","|","\000"}) do --these characters break files on some systems.
								newstr=newstr:replace(let,"")
							end
							if #newstr>0 then
								rename(programdata.selectedimage,newstr)
								textdata={}
							end
						end
					end
				elseif not v.binding3 then
					if v.operation=="add" then
						config[v.binding][v.binding2]=config[v.binding][v.binding2]+v.amount
					elseif v.operation=="sub" then
						config[v.binding][v.binding2]=config[v.binding][v.binding2]-v.amount
					elseif v.operation=="delete" then
						table.remove(config[v.binding], v.binding2 )
					elseif v.operation=="up" and v.binding2>1 then
						local temp=config[v.binding][v.binding2]
						table.remove(config[v.binding], v.binding2 )
						table.insert(config[v.binding], v.binding2-1,temp)
						
					elseif v.operation=="down" then
						local temp=config[v.binding][v.binding2]
						table.remove(config[v.binding], v.binding2 )
						table.insert(config[v.binding], v.binding2+1,temp)
					elseif v.operation=="swapmode" then
						local mt={["begins with"]="contains",
						["contains"]="ends in",
						["ends in"]="begins with"}
						config[v.binding][v.binding2].mode=mt[config[v.binding][v.binding2].mode] or "begins with"
					end
				elseif not v.binding4 then
					if v.operation=="add" then
						config[v.binding][v.binding2][v.binding3]=config[v.binding][v.binding2][v.binding3]+v.amount
					elseif v.operation=="sub" then
						config[v.binding][v.binding2][v.binding3]=config[v.binding][v.binding2][v.binding3]-v.amount
					elseif v.operation=="textset" then
						textdata={active=true , binding=v.binding , binding2=v.binding2,binding3=v.binding3}
					end
				else
					if v.operation=="add" then --yes, this is bad code. but it sure beats using loadsting(), i tihnk?
						config[v.binding][v.binding2][v.binding3][v.binding4]=config[v.binding][v.binding2][v.binding3][v.binding4]+v.amount
					elseif v.operation=="sub" then	
						config[v.binding][v.binding2][v.binding3][v.binding4]=config[v.binding][v.binding2][v.binding3][v.binding4]-v.amount
					end
				end
				writeconfigfile() --save after any changes.
				print("saved config file")
				break
			end
			::next::
		end
	end


	if action_id==hash"mwd" then
			programdata.settingscroll=programdata.settingscroll-1*delta*programdata.height*config.scrollsen
	end
	
	if action_id==hash"mwu" then
		if programdata.settingscroll <0 then
			programdata.settingscroll=programdata.settingscroll+1*delta*programdata.height*config.scrollsen
		end
	end

	if action_id==hash"text" then
		if textdata.active and textdata.binding then
			local td=textdata
			config[td.binding][td.binding2][td.binding3]=config[td.binding][td.binding2][td.binding3]..action.text:lower()
			writeconfigfile()
			print("saved config file")
		elseif textdata.active and textdata.binding2=="\nrename" then
			local td=textdata
			td.binding3=td.binding3..action.text
			--print("A")
		end
	end
	
	if action_id==hash"delete" and (action.pressed or action.repeated) then
		if textdata.active and textdata.binding then
			local td=textdata
			config[td.binding][td.binding2][td.binding3]=config[td.binding][td.binding2][td.binding3]:sub(1,#config[td.binding][td.binding2][td.binding3] -1)
			writeconfigfile()
			print("saved config file")
		elseif textdata.active and textdata.binding2=="\nrename" then
			local td=textdata
			td.binding3=td.binding3:sub(1,#td.binding3-1)
		end
	end
	
	
end