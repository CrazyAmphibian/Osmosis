local nodes={}

local plists={}
local p_min=0
local p_max=0

local typeing_getstring -- gets the string to modify. this would return something like return a[1]
local typeing_setstring -- sets the string to modify. this would then go a[1]=str
local typeing_identifier="" --string that is used for ID for text flashing or stuff
--we do this to make it quite dynamic and easy to modify things.

local MAX_TUMBNAILS=64
local thumbnailbuffers={}

local filterimage_filterresults=false
local targetimage_filterrestults=false

local function assoc_generate_thumbnail(imagename)
	for i=1,#thumbnailbuffers do
		if thumbnailbuffers[i].img==imagename then return thumbnailbuffers[i].tex end
	end
	
	local imgdat=imagedata[imagename]
	
	local f,e=io.open("images/"..imagename ,"rb")
	if not f then print(imagename,e) imgdat.error=true return end
	local rawd=image.load(f:read("*a"))
	f:close()
	if not rawd then print(imagename,"LOAD FALIURE") imgdat.error=true return end

	--config.thumbnailsize

	--local start2=os.clock()

	imgdat.width=rawd.width
	imgdat.height=rawd.height

	local buffer={}
	local width=1
	if rawd.type==image.TYPE_RGB then width=3 end
	if rawd.type==image.TYPE_RGBA then width=4 end
	if rawd.type==image.TYPE_LUMINANCE then width=1 end
	if rawd.type==image.TYPE_LUMINANCE_ALPHA then width=2 end

	local reduce=math.ceil(math.max(imgdat.width,imgdat.height)/(config.thumbnailsize))
	local nw,nh=math.floor(imgdat.width/reduce), math.floor(imgdat.height/reduce)

	local ow=imgdat.width

	--print(imgdat.width,imgdat.height,nw,nh,reduce,config.thumbnailsize)
	for h=0,nh-1 do
		--h=h
		for w=0,nw-1 do
			--w=w
			buffer[#buffer+1]=string.sub(rawd.buffer,(h*width*ow+w*width)*reduce+1,(h*width*ow+w*width)*reduce+width)
		end
	end

	--local start3=os.clock()
	local nubuf=table.concat(buffer)

	imgdat.thumbnailimagetype=rawd.type
	imgdat.thumbnailw=nw
	imgdat.thumbnailh=nh


imgdat.thumbnailbuffer=nubuf

local tc= gui.new_texture("IMAGEP_"..imagename, imgdat.thumbnailw,imgdat.thumbnailh, imgdat.thumbnailimagetype, nubuf , false)
if tc==true then
	table.insert(thumbnailbuffers,1,{img=imagename,tex="IMAGEP_"..imagename})
	if thumbnailbuffers[MAX_TUMBNAILS+1] then
		gui.delete_texture( thumbnailbuffers[MAX_TUMBNAILS+1].tex)
		thumbnailbuffers[MAX_TUMBNAILS+1]=nil
	end
	return "IMAGEP_"..imagename
end
print("associative thumbnail failed to generate")
return nil
	
end

function init(self)
	msg.post(".", "acquire_input_focus")
end


function update(self, dt)
	for i=1,#nodes do
		local node=nodes[i]
		gui.delete_node(node.node)
		nodes[i]=nil
	end
	plists={}

	if  programdata.screen ~="associations" then return end

	local _scale=config.guiscale
	--[[
	assoc.images = {}
	assoc.ordered = false
	assoc.name = ""
	assoc.tags = {}
	]]
	local yoff=0.0

	local node


if not programdata.activeassociation then --viewing all associations
	
	


	yoff=yoff-(45+128)*_scale

	
	yoff=yoff-_scale*30 + programdata.associationscroll
	
	for i=1,#associations do
		
		if yoff>_scale*40 then yoff=yoff-_scale*(138+50+40) goto continue end
		if yoff<-(programdata.height-_scale*(10)) then break end
		
		local assoc=associations[i]
		local node
		
		if filterimage_filterresults and programdata.assocfilterimage then
			for i=1,#assoc.images do
				if assoc.images[i]==programdata.assocfilterimage then goto ok end
			end
			goto continue
			::ok::
		end
		--print(programdata.associatedimage)
		if targetimage_filterrestults and programdata.associatedimage then
			for i=1,#assoc.images do
				if assoc.images[i]==programdata.associatedimage then goto ok end
			end
			goto continue
			::ok::
		end
		
		local isselected=typeing_identifier=="ASSOCIATION_\000_"..i
		
		node=gui.new_box_node(vmath.vector3(_scale*10,programdata.height-_scale*10+yoff,0), vmath.vector3(programdata.width-_scale*20,_scale*(20+128+20+50),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(.2))
		nodes[#nodes+1]={node=node}
		
		node=gui.new_box_node(vmath.vector3(_scale*15,programdata.height-_scale*15+yoff,0), vmath.vector3(programdata.width-_scale*30,_scale*(30),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(isselected and .05 or .1))
		nodes[#nodes+1]={node=node,clicked=function()
			typeing_getstring=function() return assoc.name end
			typeing_setstring=function(s) assoc.name=s end
			typeing_identifier="ASSOCIATION_\000_"..i
		end,clickoffed=function()
			if isselected then
				typeing_getstring=nil
				typeing_setstring=nil
				typeing_identifier=""
			end
		end}
		local pnode=node
		node=gui.new_text_node(vmath.vector3(0,0,0), assoc.name .. (((os.clock()%1>=.5) and isselected) and "|" or "") )
		gui.set_font(node, "sysoneandhalf")
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_parent(node,pnode)
		

		yoff=yoff-40*_scale
		
		local xoff=0
		for i=1,4 do
			local img=assoc.images[i]
			if not img then break end

			local tex=assoc_generate_thumbnail(img)
			if not tex then break end
			
			local is= 128/math.max(imagedata[img].height,imagedata[img].width)
			node=gui.new_box_node(vmath.vector3(_scale*45+xoff,programdata.height-_scale*15+yoff,0), vmath.vector3(_scale*128,_scale*128,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node}
			pnode=node
			
			node=gui.new_box_node(vmath.vector3(64*_scale,-64*_scale,0), vmath.vector3(_scale*is*imagedata[img].width,_scale*is*imagedata[img].height,0))
			gui.set_pivot(node, gui.PIVOT_CENTER)
			gui.set_texture(node,  tex)
			gui.set_parent(node,pnode)
			xoff=xoff+138*_scale
			
		end

		yoff=yoff-138*_scale

		-- add
		node=gui.new_box_node(vmath.vector3(_scale*15,programdata.height-_scale*15+yoff,0), vmath.vector3(_scale*200,_scale*(30),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(.1))
		nodes[#nodes+1]={node=node,clicked=function()
			if not programdata.associatedimage then return end
			for i=1,#assoc.images do
				if assoc.images[i]==programdata.associatedimage then return end
			end
			assoc.images[#assoc.images+1]=programdata.associatedimage
			writeassocfile()
		end}
		pnode=node
		
		node=gui.new_text_node(vmath.vector3(0,0,0), "add active image")
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_font(node, "sysoneandhalf")
		gui.set_scale(node, vmath.vector3(_scale))
		gui.set_parent(node,pnode)
		
		--edit
		node=gui.new_box_node(vmath.vector3(_scale*225,programdata.height-_scale*15+yoff,0), vmath.vector3(_scale*200,_scale*(30),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(.1))
		nodes[#nodes+1]={node=node,clicked=function()
			programdata.activeassociation=i
		end}
		local pnode=node

		node=gui.new_text_node(vmath.vector3(0,0,0), "view + edit")
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_font(node, "sysoneandhalf")
		gui.set_scale(node, vmath.vector3(_scale))
		gui.set_parent(node,pnode)
		
		--filter
		node=gui.new_box_node(vmath.vector3(_scale*435,programdata.height-_scale*15+yoff,0), vmath.vector3(_scale*200,_scale*(30),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(.1))
		nodes[#nodes+1]={node=node,clicked=function() programdata.displayordermeta.association=i
			programdata.screen="gallery"
			programdata.displayorder="associated"
		 end}
		local pnode=node

		node=gui.new_text_node(vmath.vector3(0,0,0), "filter")
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_font(node, "sysoneandhalf")
		gui.set_scale(node, vmath.vector3(_scale))
		gui.set_parent(node,pnode)
		
		--delete
		node=gui.new_box_node(vmath.vector3(_scale*645,programdata.height-_scale*15+yoff,0), vmath.vector3(_scale*200,_scale*(30),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node, vmath.vector3(.1))
		nodes[#nodes+1]={node=node,clicked=function() table.remove(associations,i) writeassocfile() end}
		local pnode=node
		
		node=gui.new_text_node(vmath.vector3(0,0,0), "delete")
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_font(node, "sysoneandhalf")
		gui.set_scale(node, vmath.vector3(_scale))
		gui.set_parent(node,pnode)
		yoff=yoff-_scale*50
		::continue::
	end



	node=gui.new_box_node(vmath.vector3(0,programdata.height,0), vmath.vector3(programdata.width,_scale*(45+128),0))
	gui.set_pivot(node, gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.2))
	nodes[#nodes+1]={node=node}

	if programdata.associatedimage then
		local t=assoc_generate_thumbnail(programdata.associatedimage)
		if t then
			local img=programdata.associatedimage
			local is= 128/math.max(imagedata[img].height,imagedata[img].width)

			node=gui.new_text_node(vmath.vector3(_scale*15,programdata.height-_scale*25,0), programdata.associatedimage:truncate(50))
			gui.set_pivot(node, gui.PIVOT_SW)
			gui.set_font(node, "sysstd")
			gui.set_scale(node, vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}

			node=gui.new_box_node(vmath.vector3(_scale*15,programdata.height-_scale*25,0), vmath.vector3(_scale*128,_scale*128,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node}
			pnode=node

			node=gui.new_box_node(vmath.vector3(64*_scale,-64*_scale,0), vmath.vector3(_scale*is*imagedata[img].width,_scale*is*imagedata[img].height,0))
			gui.set_pivot(node, gui.PIVOT_CENTER)
			gui.set_texture(node,  t)
			gui.set_parent(node,pnode)

			node=gui.new_text_node(vmath.vector3(_scale*15,programdata.height-_scale*(128+25),0), "SELECTED")
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_font(node, "sysstd")
			gui.set_scale(node,  vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}



			node=gui.new_box_node(vmath.vector3(_scale*(20+128),programdata.height-_scale*25,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				targetimage_filterrestults=not targetimage_filterrestults
				return true
			end}
			pnode=node

			node=gui.new_box_node(vmath.vector3(0*_scale,-0*_scale,0), vmath.vector3(_scale*15,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_texture(node,  "srcimg")
			gui.play_flipbook(node, "arm"..(targetimage_filterrestults and "yes" or  "no"))
			gui.set_parent(node,pnode)

			node=gui.new_text_node(vmath.vector3(15*_scale,-0*_scale,0), "filter")
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)
			
			--targetimage_filterrestults

			node=gui.new_box_node(vmath.vector3(_scale*(20+128),programdata.height-_scale*45,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.assocfilterimage=programdata.associatedimage
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "set as target")
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)




			node=gui.new_box_node(vmath.vector3(_scale*(20+128),programdata.height-_scale*65,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.selectedimage=programdata.associatedimage
				programdata.screen="image"
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "open image")
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(_scale*(20+128),programdata.height-_scale*85,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.associatedimage=nil
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "clear")
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)
		end
	end
	if programdata.assocfilterimage then
		local t=assoc_generate_thumbnail(programdata.assocfilterimage)
		if t then
			local img=programdata.assocfilterimage
			local is= 128/math.max(imagedata[img].height,imagedata[img].width)

			node=gui.new_text_node(vmath.vector3(programdata.width-_scale*15,programdata.height-_scale*25,0), programdata.assocfilterimage:truncate(50))
			gui.set_pivot(node, gui.PIVOT_SE)
			gui.set_font(node, "sysstd")
			gui.set_scale(node, vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}

			node=gui.new_box_node(vmath.vector3(programdata.width-_scale*15,programdata.height-_scale*25,0), vmath.vector3(_scale*128,_scale*128,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node}
			pnode=node

			node=gui.new_box_node(vmath.vector3(-64*_scale,-64*_scale,0), vmath.vector3(_scale*is*imagedata[img].width,_scale*is*imagedata[img].height,0))
			gui.set_pivot(node, gui.PIVOT_CENTER)
			gui.set_texture(node,  t)
			gui.set_parent(node,pnode)

			node=gui.new_text_node(vmath.vector3(programdata.width-_scale*15,programdata.height-_scale*(128+25),0), "FILTER")
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_font(node, "sysstd")
			gui.set_scale(node,  vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}

			node=gui.new_box_node(vmath.vector3(programdata.width-_scale*(20+128),programdata.height-_scale*25,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				filterimage_filterresults=not filterimage_filterresults
				return true
			end}
			pnode=node

			node=gui.new_box_node(vmath.vector3(0*_scale,-0*_scale,0), vmath.vector3(_scale*15,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_texture(node,  "srcimg")
			gui.play_flipbook(node, "arm"..(filterimage_filterresults and "yes" or  "no"))
			gui.set_parent(node,pnode)

			node=gui.new_text_node(vmath.vector3(-15*_scale,-0*_scale,0), "filter")
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(programdata.width-_scale*(20+128),programdata.height-_scale*45,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.associatedimage=programdata.assocfilterimage
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "set as selected")
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(programdata.width-_scale*(20+128),programdata.height-_scale*65,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.selectedimage=programdata.assocfilterimage
				programdata.screen="image"
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "open image")
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(programdata.width-_scale*(20+128),programdata.height-_scale*85,0), vmath.vector3(_scale*100,_scale*15,0))
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,priority=1,clicked=function()
				programdata.assocfilterimage=nil
				return true
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-0*_scale,0), "clear")
			gui.set_pivot(node, gui.PIVOT_NE)
			gui.set_font(node, "sysstd")
			gui.set_parent(node,pnode)
			--filterimage_filterresults
		end
	end
	
	node=gui.new_box_node(vmath.vector3(0*_scale,programdata.height-(45+128)*_scale,0), vmath.vector3(30,30,0))
	gui.set_pivot(node, gui.PIVOT_NW)
	gui.set_color(node,  vmath.vector3(.15))
	nodes[#nodes+1]={node=node,priority=1,clicked=function()
		table.insert(associations,1,{images={programdata.associatedimage},name="",ordered=false,tags={}})
		writeassocfile()
		return true
	end}

	node=gui.new_box_node(vmath.vector3(0*_scale,programdata.height-(45+128)*_scale,0), vmath.vector3(30,30,0))
	gui.set_pivot(node, gui.PIVOT_NW)
	gui.set_texture(node,"srcimg")
	gui.play_flipbook(node, "add")
	nodes[#nodes+1]={node=node}
	
	
else --modifying a single association

	local assoc=  associations[programdata.activeassociation]

	local yoff=-(35+96)*_scale-programdata.specassscroll/_scale
	
	for i=1,#assoc.images do
		if yoff>_scale*20 then yoff=yoff-(128+35)*_scale goto continue end
		if yoff<-(programdata.height-_scale*10) then yoff=yoff-(128+35)*_scale break end
		
		local ifn=assoc.images[i]
		local t=assoc_generate_thumbnail(ifn)
		
		node=gui.new_box_node(vmath.vector3(_scale*10,programdata.height-_scale*5+yoff,0), vmath.vector3(programdata.width-_scale*20,_scale*(25+128),0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.2))
		nodes[#nodes+1]={node=node}


		node=gui.new_text_node(vmath.vector3(_scale*15,programdata.height-_scale*25+yoff,0), "#"..i)
		gui.set_pivot(node, gui.PIVOT_SW)
		gui.set_font(node, "sysstd")
		gui.set_scale(node, vmath.vector3(_scale))
		nodes[#nodes+1]={node=node}
		
		
		node=gui.new_box_node(vmath.vector3(_scale*20,programdata.height-_scale*25+yoff,0), vmath.vector3(_scale*90,_scale*15,0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.15))
		nodes[#nodes+1]={node=node,clicked=function()
			if i>1 then
				assoc.images[i-1],assoc.images[i]=assoc.images[i],assoc.images[i-1]
			end
		end}
		pnode=node

		node=gui.new_text_node(vmath.vector3(0*_scale,-07.5*_scale,0), "move up")
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_scale(node,  vmath.vector3(_scale))
		gui.set_font(node, "sysstd")
		gui.set_parent(node,pnode)

		node=gui.new_box_node(vmath.vector3(_scale*20,programdata.height-_scale*55+yoff,0), vmath.vector3(_scale*90,_scale*15,0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.15))
		nodes[#nodes+1]={node=node,clicked=function()
			if i>1 then
				table.remove(assoc.images,i)
				table.insert(assoc.images,1,ifn)
				writeassocfile()
			end
		end}
		pnode=node

		node=gui.new_text_node(vmath.vector3(0*_scale,-07.5*_scale,0), "to top")
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_scale(node,  vmath.vector3(_scale))
		gui.set_font(node, "sysstd")
		gui.set_parent(node,pnode)

		node=gui.new_box_node(vmath.vector3(_scale*20,programdata.height-_scale*84+yoff,0), vmath.vector3(_scale*90,_scale*15,0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.15))
		nodes[#nodes+1]={node=node,clicked=function()
			table.remove(assoc.images,i)
			writeassocfile()
		end}
		pnode=node

		node=gui.new_text_node(vmath.vector3(0*_scale,-07.5*_scale,0), "remove")
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_scale(node,  vmath.vector3(_scale))
		gui.set_font(node, "sysstd")
		gui.set_parent(node,pnode)

		node=gui.new_box_node(vmath.vector3(_scale*20,programdata.height-_scale*111+yoff,0), vmath.vector3(_scale*90,_scale*15,0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.15))
		nodes[#nodes+1]={node=node,clicked=function()
			table.remove(assoc.images,i)
			table.insert(assoc.images,ifn)
			writeassocfile()
		end}
		pnode=node

		node=gui.new_text_node(vmath.vector3(0*_scale,-07.5*_scale,0), "to bottom")
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_scale(node,  vmath.vector3(_scale))
		gui.set_font(node, "sysstd")
		gui.set_parent(node,pnode)

		node=gui.new_box_node(vmath.vector3(_scale*20,programdata.height-_scale*(128+10)+yoff,0), vmath.vector3(_scale*90,_scale*15,0))
		gui.set_pivot(node, gui.PIVOT_NW)
		gui.set_color(node,  vmath.vector3(.15))
		nodes[#nodes+1]={node=node,clicked=function()
			if i<#assoc.images then
				assoc.images[i+1],assoc.images[i]=assoc.images[i],assoc.images[i+1]
				writeassocfile()
			end
		end}
		pnode=node

		node=gui.new_text_node(vmath.vector3(0*_scale,-07.5*_scale,0), "move down")
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_scale(node,  vmath.vector3(_scale))
		gui.set_font(node, "sysstd")
		gui.set_parent(node,pnode)
		
		if t then
			local is= 128/math.max(imagedata[ifn].height,imagedata[ifn].width)
			
			node=gui.new_text_node(vmath.vector3(_scale*115,programdata.height-_scale*25+yoff,0), ifn:truncate(50))
			gui.set_pivot(node, gui.PIVOT_SW)
			gui.set_font(node, "sysstd")
			gui.set_scale(node, vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}

			node=gui.new_box_node(vmath.vector3(_scale*115,programdata.height-_scale*25+yoff,0), vmath.vector3(_scale*128,_scale*128,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,clicked=function()
				programdata.screen="image"
				programdata.selectedimage=ifn
				writeassocfile()
			end}
			pnode=node

			node=gui.new_box_node(vmath.vector3(64*_scale,-64*_scale,0), vmath.vector3(_scale*is*imagedata[ifn].width,_scale*is*imagedata[ifn].height,0))
			gui.set_pivot(node, gui.PIVOT_CENTER)
			gui.set_texture(node,  t)
			gui.set_parent(node,pnode)
		end

		if programdata.associatedimage then
			node=gui.new_box_node(vmath.vector3(_scale*248,programdata.height-_scale*(25)+yoff,0), vmath.vector3(_scale*150,_scale*20,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,clicked=function()
				for i=1,#assoc.images do
					if assoc.images[i]==programdata.associatedimage then
						return
					end
				end
				table.insert(assoc.images,i,programdata.associatedimage)
				writeassocfile()
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-10*_scale,0), "insert above")
			gui.set_pivot(node, gui.PIVOT_W)
			gui.set_scale(node,  vmath.vector3(_scale))
			gui.set_font(node, "sysoneandhalf")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(_scale*248,programdata.height-_scale*(128+5)+yoff,0), vmath.vector3(_scale*150,_scale*20,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,clicked=function()
				for i=1,#assoc.images do
					if assoc.images[i]==programdata.associatedimage then
						return
					end
				end
				table.insert(assoc.images,i+1,programdata.associatedimage)
				writeassocfile()
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-10*_scale,0), "insert below")
			gui.set_pivot(node, gui.PIVOT_W)
			gui.set_scale(node,  vmath.vector3(_scale))
			gui.set_font(node, "sysoneandhalf")
			gui.set_parent(node,pnode)
		end

		
		yoff=yoff-(128+35)*_scale
		::continue::
	end


	--show selected image up top 
	node=gui.new_box_node(vmath.vector3(0,programdata.height,0), vmath.vector3(programdata.width,_scale*(30+96),0))
	gui.set_pivot(node, gui.PIVOT_NW)
	gui.set_color(node, vmath.vector3(.2))
	nodes[#nodes+1]={node=node}

	node=gui.new_box_node(vmath.vector3(_scale*(128+25),programdata.height-_scale*25,0), vmath.vector3(_scale*175,_scale*25,0))
	gui.set_pivot(node, gui.PIVOT_NW)
	gui.set_color(node,  vmath.vector3(.15))
	nodes[#nodes+1]={node=node,clicked=function()
		programdata.activeassociation=nil
	end}
	pnode=node

	node=gui.new_text_node(vmath.vector3(0*_scale,-12.5*_scale,0), "view all")
	gui.set_pivot(node, gui.PIVOT_W)
	gui.set_scale(node,  vmath.vector3(_scale))
	gui.set_font(node, "sysoneandhalf")
	gui.set_parent(node,pnode)
	
	if programdata.associatedimage then
		local t=assoc_generate_thumbnail(programdata.associatedimage)
		if t then
			local img=programdata.associatedimage
			local is= 96/math.max(imagedata[img].height,imagedata[img].width)

			node=gui.new_text_node(vmath.vector3(_scale*15,programdata.height-_scale*25,0), programdata.associatedimage:truncate(50))
			gui.set_pivot(node, gui.PIVOT_SW)
			gui.set_font(node, "sysstd")
			gui.set_scale(node, vmath.vector3(_scale))
			nodes[#nodes+1]={node=node}

			node=gui.new_box_node(vmath.vector3(_scale*15,programdata.height-_scale*25,0), vmath.vector3(_scale*96,_scale*96,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node}
			pnode=node

			node=gui.new_box_node(vmath.vector3(48*_scale,-48*_scale,0), vmath.vector3(_scale*is*imagedata[img].width,_scale*is*imagedata[img].height,0))
			gui.set_pivot(node, gui.PIVOT_CENTER)
			gui.set_texture(node,  t)
			gui.set_parent(node,pnode)

			
			node=gui.new_box_node(vmath.vector3(_scale*(128+25),programdata.height-_scale*55,0), vmath.vector3(_scale*175,_scale*25,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,clicked=function()
				for i=1,#assoc.images do
					if assoc.images[i]==programdata.associatedimage then
						return
					end
				end
				table.insert(assoc.images,1, programdata.associatedimage )
				writeassocfile()
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-12.5*_scale,0), "insert at top")
			gui.set_pivot(node, gui.PIVOT_W)
			gui.set_scale(node,  vmath.vector3(_scale))
			gui.set_font(node, "sysoneandhalf")
			gui.set_parent(node,pnode)

			node=gui.new_box_node(vmath.vector3(_scale*(128+25),programdata.height-_scale*85,0), vmath.vector3(_scale*175,_scale*25,0))
			gui.set_pivot(node, gui.PIVOT_NW)
			gui.set_color(node,  vmath.vector3(.15))
			nodes[#nodes+1]={node=node,clicked=function()
				for i=1,#assoc.images do
					if assoc.images[i]==programdata.associatedimage then
						return
					end
				end
				table.insert(assoc.images, programdata.associatedimage )
				writeassocfile()
			end}
			pnode=node

			node=gui.new_text_node(vmath.vector3(0*_scale,-12.5*_scale,0), "insert at bottom")
			gui.set_pivot(node, gui.PIVOT_W)
			gui.set_scale(node,  vmath.vector3(_scale))
			gui.set_font(node, "sysoneandhalf")
			gui.set_parent(node,pnode)
		end
	end
	

end --end association gui code.
	

	
	
	for i=1,#nodes do
		local prio=nodes[i].priority or 0
		local p=plists[prio]
		if not p then p={} plists[prio]=p end
		p[#p+1]=nodes[i]
		p_max=math.max(p_max,prio)
		p_min=math.min(p_min,prio)
	end
	
end

function on_input(self, action_id, action)
	if  programdata.screen ~="associations" then return end

	if action_id==hash"text" and typeing_getstring and typeing_setstring then
		typeing_setstring(typeing_getstring()..action.text)
	end
	if action_id==hash"delete" and action.repeated and typeing_getstring and typeing_setstring then
		typeing_setstring(typeing_getstring():sub(1,#typeing_getstring()-1))
	end

	if action_id==hash"esc" and action.pressed then
		programdata.screen="image"
	end

	if programdata.activeassociation then
		
		if action_id==hash"mwu" then
			programdata.specassscroll=programdata.specassscroll+10*config.scrollsen/config.guiscale
		end
		if action_id==hash"mwd" then
			programdata.specassscroll=programdata.specassscroll-10*config.scrollsen/config.guiscale
		end
		programdata.specassscroll=math.min(programdata.specassscroll,0)
	else
		if action_id==hash"mwu" then
			programdata.associationscroll=programdata.associationscroll+10*config.scrollsen/config.guiscale
		end
		if action_id==hash"mwd" then
			programdata.associationscroll=programdata.associationscroll-10*config.scrollsen/config.guiscale
		end
		programdata.associationscroll=math.max(programdata.associationscroll,0)
	end
	
	for i=p_max,p_min,-1 do
		local p=plists[i]
		if p then
		for i=1,#p do
			local nt=p[i]
			
			if action_id==hash"m1" and action.pressed then
				if gui.pick_node(nt.node, action.x, action.y) then
					if nt.clicked and nt.clicked() then goto exit end
				else
					if nt.clickoffed and nt.clickoffed() then goto exit end
				end
			end
			
		end
		end
	end

	::exit::
	
end
